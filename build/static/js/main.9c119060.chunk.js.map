{"version":3,"sources":["Charts.js","usastates.js","popup.js","App.js","header.js","main.js","index.js","sort.png"],"names":["Charts","props","lastDate","useState","loading","setLoading","currentGraph","setCurrentGraph","currentType","setCurrenType","showAll","setShowAll","numDays","setNumdays","toBeAdded","setToBeAdded","countryList","setCountryList","test","setTest","graphType","setGraphType","testing","needed","casesArray","deathsArray","recoveredArray","countries","first","forEach","element","includes","country","historyData","timeline","dates","Object","keys","cases","values","deaths","recovered","i","length","push","n","lastIndexOf","substring","console","log","showFoot","className","returnLines","temp","TestGraph","Line","Bar","Area","dataKey","stroke","stringToColour","fill","dot","map","each","key","useEffect","fetch","headers","accept","then","res","json","data","search","name","from","str","hash","charCodeAt","colour","j","toString","substr","handleList","e","removeFromList","target","value","handleType","show3","changeDays","event","which","handleTypes","type","onClick","temporary","onSubmit","preventDefault","min","max","placeholder","style","width","onKeyPress","onChange","returnCountryList","full","again","Set","ele","add","Array","toDelete","index","indexOf","splice","Spinner","animation","variant","disabled","checked","toadd","old","secondList","dropdown0","displayGraphMenu","LineChart","BarChart","AreaChart","PieChart","ComposedChart","current","height","strokeDasharray","syncId","renderLineChart","Main","latest","setLatest","results","setResults","setSearch","setType","handleSearch","filtered","filter","state","toUpperCase","startsWith","image","src","sort","cursor","alt","submitHandler","handleChange","col","sortedBaz","slice","a","b","bandA","bandB","comparison","table","textAlign","overflow","Table","striped","bordered","hover","maxWidth","isNewDeath","deathSign","todayDeaths","isNewCases","casesSign","todayCases","displayType","thousandSeparator","active","tests","testsPerOneMillion","Popup","show","setShow","handleShow","Modal","onHide","dialogClassName","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","App","finalResults","setFinalResults","isLoading","setIsloading","url","countryInfo","flag","critical","casesPerOneMillion","deathsPerOneMillion","Button","lastUpdated","Date","parseInt","updated","CardDeck","Card","bg","text","marginLeft","Text","Footer","main","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9c119060.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Components from \"react\";\r\nimport \"./App.css\";\r\nimport \"./charts.css\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nimport {\r\n  LineChart,Bar,BarChart,Pie,PieChart,Area,AreaChart,ComposedChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nfunction Charts(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentGraph, setCurrentGraph] = useState();\r\n  const [currentType, setCurrenType] = useState(\"confirmed\");\r\n  const [showAll, setShowAll] = useState(false);\r\n  const [numDays, setNumdays] = useState(30);\r\n\r\n  const [toBeAdded, setToBeAdded] = useState([\"USA\"]);\r\n  const [countryList, setCountryList] = useState([\"USA\"]);\r\n\r\n  const [test, setTest] = useState([]);\r\n  const [graphType, setGraphType] = useState(\"Line\");\r\n\r\n  var lastDate;\r\n\r\n  useEffect(() => {\r\n    fetch(`https://cors-anywhere.herokuapp.com/https://corona.lmao.ninja/v2/historical?lastdays=${numDays}`, { headers: { accept: \"Accept: application/json\" } })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTest(data);\r\n\r\n        setLoading(false);\r\n        var search = props.name;\r\n        if (props.from === \"small\") {\r\n          setCurrentGraph(props.name);\r\n          setCountryList([props.name]);\r\n        }\r\n        setCurrentGraph(search);\r\n      });\r\n\r\n    // eslint-disable-next-line\r\n  }, [numDays]);\r\n\r\n  function testing(needed) {\r\n    var casesArray = [];\r\n    var deathsArray = [];\r\n    var recoveredArray = [];\r\n    var countries = countryList;\r\n    var first = \"true\";\r\n\r\n    test.forEach((element) => {\r\n      if (countries.includes(element.country)) {\r\n        var historyData = { ...element.timeline };\r\n\r\n        var dates = Object.keys(historyData.cases);\r\n        var cases = Object.values(historyData.cases);\r\n        var deaths = Object.values(historyData.deaths);\r\n        var recovered = Object.values(historyData.recovered);\r\n\r\n        for (var i = 0; i < dates.length; i++) {\r\n          if (casesArray.length < cases.length) {\r\n            casesArray.push({});\r\n            deathsArray.push({});\r\n            recoveredArray.push({});\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dates.length; i++) {\r\n          if (first) {\r\n            var n = dates[i].lastIndexOf(\"/\");\r\n            casesArray[i][\"date\"] = dates[i].substring(0,n);\r\n            deathsArray[i][\"date\"] = dates[i].substring(0,n);\r\n            recoveredArray[i][\"date\"] = dates[i].substring(0,n);\r\n            console.log(dates[i])\r\n            lastDate = dates[i];\r\n          }\r\n\r\n          casesArray[i][element.country] = cases[i];\r\n          deathsArray[i][element.country] = deaths[i];\r\n          recoveredArray[i][element.country] = recovered[i];\r\n        }\r\n        first = false;\r\n      }\r\n    });\r\n\r\n    if (currentType === \"confirmed\" && needed === \"confirmed\") {\r\n      return casesArray;\r\n    }\r\n\r\n    if (currentType === \"recovered\" || needed === \"recovered\") {\r\n      return recoveredArray;\r\n    }\r\n    if (currentType === \"deaths\" || needed === \"deaths\") {\r\n      return deathsArray;\r\n    }\r\n  }\r\n\r\n  function showFoot() {\r\n    let fixed = (\r\n      <span className=\"graphMessage\">Graph last updated on : {lastDate}</span>\r\n    );\r\n\r\n    return fixed;\r\n  }\r\n\r\n  function returnLines() {\r\n    var temp;\r\n    function what()\r\n     {\r\n       if(graphType==='Line')\r\n       {\r\n\r\n        return Line\r\n       }\r\n\r\n       if(graphType==='Bar')\r\n       {\r\n \r\n        return Bar\r\n       }\r\n\r\n       if(graphType==='Area')\r\n       {\r\n   \r\n        return Area\r\n       }\r\n    \r\n       if(graphType==='AreaLineComposed')\r\n       {\r\n   \r\n        return \r\n       }\r\n     }\r\n \r\n      var TestGraph = what();\r\n    if (countryList.length === 1) {\r\n      temp = (\r\n        <TestGraph\r\n          dataKey={countryList[0]}\r\n          stroke={stringToColour(countryList[0])}\r\n          fill={stringToColour(countryList[0])}\r\n          dot={false} \r\n        />\r\n      );\r\n    }\r\n    if (countryList.length > 1) {\r\n      temp = countryList.map((each) => {\r\n        return <TestGraph key={each} dataKey={each} stroke={stringToColour(each)} fill={stringToColour(each)} dot={false} />;\r\n      });\r\n    }\r\n\r\n    return temp;\r\n  }\r\n\r\n  var stringToColour = function (str) {\r\n    var hash = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    var colour = \"#\";\r\n    for (var j = 0; j < 3; j++) {\r\n      var value = (hash >> (j * 8)) & 0xff;\r\n      colour += (\"00\" + value.toString(16)).substr(-2);\r\n    }\r\n    return colour;\r\n  };\r\n\r\n  function renderLineChart() {\r\n    var width;\r\n    function what()\r\n     {\r\n       if(graphType==='Line')\r\n       {\r\n   \r\n        return LineChart\r\n       }\r\n\r\n       if(graphType==='Bar')\r\n       {\r\n   \r\n        return BarChart\r\n       }\r\n       if(graphType==='Area')\r\n       {\r\n   \r\n        return AreaChart\r\n       }\r\n       if(graphType==='Pie')\r\n       {\r\n   \r\n        return PieChart\r\n       }\r\n       if(graphType==='AreaLineComposed')\r\n       {\r\n   \r\n        return ComposedChart\r\n       }\r\n     }\r\n \r\n      var TestGraph = what();\r\n    if (props.from === \"small\") {\r\n      width = \"120%\";\r\n    }\r\n\r\n    if (!showAll) {\r\n      var current = testing(\"confirmed\");\r\n\r\n \r\n\r\n\r\n      return (\r\n        <div className=\"graphs\">\r\n          <div>\r\n            {\" \"}\r\n            <h3>{currentType} </h3>\r\n            <ResponsiveContainer width={width} height={400}>\r\n              <TestGraph data={current}>\r\n                <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                <XAxis dataKey=\"date\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n\r\n                {returnLines()}\r\n              </TestGraph>\r\n            </ResponsiveContainer>\r\n            {showFoot()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"graphs\">\r\n        <div>\r\n          {\" \"}\r\n          <h3>Confirmed </h3>\r\n          <ResponsiveContainer width=\"95%\" height={400}>\r\n            <TestGraph data={testing(\"confirmed\")} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\"/>\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              syncId=\"anyId\"\r\n              {returnLines()}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <h3>Recovered </h3>\r\n          <ResponsiveContainer width=\"95%\" height={400}>\r\n            <TestGraph data={testing(\"recovered\")} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n\r\n              {returnLines()}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <h3>Deaths </h3>\r\n          <ResponsiveContainer width=\"95%\" height={400}>\r\n            <TestGraph data={testing(\"deaths\")} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n\r\n              {returnLines()}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n        </div>\r\n\r\n        {showFoot()}\r\n      </div>\r\n    );\r\n  }\r\n  function handleList(e) {\r\n    removeFromList(currentGraph);\r\n    setCountryList([...countryList, e.target.value]);\r\n    setCurrentGraph(e.target.value);\r\n  }\r\n\r\n  function handleType(e) {\r\n    setCurrenType(e.target.value);\r\n  }\r\n\r\n  function show3() {\r\n    showAll ? setShowAll(false) : setShowAll(true);\r\n  }\r\n\r\n  function changeDays(event) {\r\n    if (event.which === 13) {\r\n      setNumdays(event.target.value);\r\n    }\r\n  }\r\n\r\n  function handleTypes() {\r\n    if (!showAll) {\r\n      return (\r\n        <>\r\n          <form>\r\n            <label> Select Graph for </label>\r\n            <select\r\n              name=\"type\"\r\n              value={currentType}\r\n              onChange={handleType}\r\n              className=\"selectList\"\r\n            >\r\n              <option value=\"confirmed\">Confirmed</option>\r\n              <option value=\"deaths\"> Deaths</option>\r\n              <option value=\"recovered\"> Recovered</option>\r\n            </select>\r\n            <button type=\"button\" onClick={(e) => show3(e)}>\r\n              {temporary()}\r\n            </button>\r\n          </form>\r\n         \r\n          <form onSubmit={(e) => e.preventDefault()}>\r\n            Number of days:\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"200\"\r\n              placeholder={numDays}\r\n              style={{ width: 50 }}\r\n              onKeyPress={changeDays}\r\n            />\r\n          </form>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n\r\n        {\" \"}\r\n        <button type=\"button\" onClick={(e) => show3(e)}>\r\n          {temporary()}\r\n        </button>\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n          Number of days:\r\n          <input\r\n            type=\"number\"\r\n            min=\"0\"\r\n            max=\"200\"\r\n            placeholder={numDays}\r\n            style={{ width: 50 }}\r\n            onKeyPress={changeDays}\r\n          />\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function returnCountryList() {\r\n    var full = Object.values(test);\r\n    let again = new Set();\r\n    full.map((ele, i) => {\r\n      return again.add(ele.country);\r\n    });\r\n    return Array.from(again);\r\n  }\r\n\r\n  function addToList(toadd) {\r\n    if (countryList.includes(toadd + \"\")) {\r\n    } else {\r\n      setCountryList((old) => [...old, toadd]);\r\n    }\r\n  }\r\n\r\n  function isFrom() {\r\n    if (props.from !== \"small\") {\r\n      return (\r\n        <>\r\n          <form onSubmit={(e) => e.preventDefault}>\r\n            <label>Country:</label>\r\n\r\n            <select\r\n              value={currentGraph}\r\n              onChange={handleList}\r\n              className=\"selectList\"\r\n            >\r\n              <option disabled>Select Country to compare</option>\r\n              {returnCountryList().map((value, i) => (\r\n                <option value={value} key={i}>\r\n                  {value}\r\n                </option>\r\n              ))}\r\n              ))}\r\n            </select>\r\n            {secondList()}\r\n     \r\n          </form>\r\n\r\n          {handleTypes()}\r\n          {displayGraphMenu()}\r\n          <div className=\"cover\">\r\n            {\" \"}\r\n            Click to remove: {showCurrentCountries()}\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n    return handleTypes();\r\n  }\r\n  function temporary() {\r\n    var temporary = showAll ? \"Show confirmed\" : \"Show All\";\r\n    return temporary;\r\n  }\r\n\r\n  function secondList()\r\n  {\r\n    console.log(countryList.length)\r\n    if(countryList.length!==0)\r\n    {\r\n      return       <> <select\r\n      className=\"selectList\"\r\n      name=\"country\"\r\n      onChange={(e) => {\r\n        setToBeAdded(e.target.value);\r\n      }}\r\n    >\r\n      <option checked> Select Country</option>\r\n      {returnCountryList().map((value, i) => (\r\n        <option value={value} key={i}>\r\n          {value}\r\n        </option>\r\n      ))}\r\n      ))}\r\n    </select>\r\n    <button type=\"button\" onClick={(e) => addToList(toBeAdded)}>\r\n      Add to Graph\r\n    </button></>\r\n    }\r\n  }\r\n\r\n  function removeFromList(toDelete) {\r\n    var index = countryList.indexOf(toDelete);\r\n\r\n    if (index !== -1) {\r\n      countryList.splice(index, 1);\r\n    }\r\n    setCountryList([...countryList]);\r\n  }\r\n\r\n  function showCurrentCountries() {\r\n    return countryList.map((each) => (\r\n      <span\r\n        key={each}\r\n        className=\"displayedList\"\r\n        onClick={() => removeFromList(each)}\r\n      >\r\n        {each}{\" \"}\r\n      </span>\r\n    ));\r\n  }\r\n\r\n  function displayGraphMenu() {\r\n\r\n    function handleChange(e) {\r\n      setGraphType(e.target.value);\r\n    }\r\n\r\n    var dropdown0 = (\r\n      <>\r\n        <select onChange={handleChange}>\r\n          <option value={\"Line\"}> Line</option>\r\n          <option value={\"Bar\"}> Bar</option>\r\n          <option value={\"Area\"}> Area</option>\r\n\r\n          {/* <option value={\"Composed\"}> Composed</option> */}\r\n        </select>\r\n      </>\r\n    );\r\n\r\n    return <form>Graph type: {dropdown0}</form>;\r\n  }\r\n\r\n  return loading ? (\r\n    <div className=\"spinners\">\r\n      {\" \"}\r\n      <Spinner animation=\"grow\" variant=\"primary\" />\r\n      <Spinner animation=\"grow\" variant=\"secondary\" />\r\n      <Spinner animation=\"grow\" variant=\"success\" />\r\n      <Spinner animation=\"grow\" variant=\"danger\" />\r\n      <Spinner animation=\"grow\" variant=\"warning\" />\r\n      <Spinner animation=\"grow\" variant=\"info\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"chartsNew\">\r\n      {isFrom()}\r\n\r\n      {renderLineChart()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Charts;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport sort from \"./sort.png\";\r\n\r\nfunction Main() {\r\n  let [latest, setLatest] = useState([]);\r\n  let [results, setResults] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  var [search, setSearch] = useState(\"\");\r\n  const [type, setType] = useState(\"desc\");\r\n  useEffect(() => {\r\n    fetch(\"https://cors-anywhere.herokuapp.com/https://corona.lmao.ninja/v2/states?sort=cases\", { headers: { accept: \"Accept: application/json\" } })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setLatest(data);\r\n        setResults(data);\r\n\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  function handleSearch(event) {\r\n    setSearch(event.target.value);\r\n\r\n    const filtered = latest.filter((each) => {\r\n      return each.state\r\n        .toUpperCase()\r\n        .startsWith(event.target.value.toUpperCase());\r\n    });\r\n\r\n    setResults(filtered);\r\n  }\r\n\r\n  function image() {\r\n    const image = (\r\n      <img\r\n        src={sort}\r\n        style={{ cursor: \"pointer\" }}\r\n        alt=\"Logo\"\r\n        className=\"image\"\r\n      />\r\n    );\r\n    return image;\r\n  }\r\n\r\n  function submitHandler(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  function handleChange(col) {\r\n    function compare(a, b) {\r\n      const bandA = a[col];\r\n      const bandB = b[col];\r\n\r\n      if (type !== \"asc\") {\r\n        let comparison = 0;\r\n        if (bandA > bandB) {\r\n          comparison = 1;\r\n        } else if (bandA < bandB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n      if (type === \"asc\") {\r\n        let comparison = 0;\r\n        if (bandA < bandB) {\r\n          comparison = 1;\r\n        } else if (bandA > bandB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n    }\r\n\r\n    const sortedBaz = results.slice().sort(compare);\r\n\r\n    setResults(sortedBaz);\r\n\r\n    type === \"asc\" ? setType(\"desc\") : setType(\"asc\");\r\n  }\r\n\r\n  function countries()\r\n  {\r\n    \r\n  const countries = results.map((data, i) => {\r\n    let isNewDeath = \"\";\r\n    let deathSign = \"\";\r\n    if (data.todayDeaths !== 0) {\r\n\r\n      isNewDeath = \"danger\";\r\n      deathSign = \"+\";\r\n    }\r\n    let isNewCases = \"\";\r\n    let casesSign = \"\";\r\n    if (data.todayCases !== 0) {\r\n      casesSign = \"+\";\r\n      isNewCases = \"casesNew\";\r\n    }\r\n\r\n    return (\r\n      <tr key={i}>\r\n        <td className=\"state\">\r\n          <span style={{ height: `100%` }}>\r\n            {/* <Popup name={data.country} from={\"small\"} /> */}\r\n            {data.state}\r\n          </span>\r\n        </td>\r\n        <td>\r\n          {\" \"}\r\n          <NumberFormat\r\n            value={data.cases}\r\n            displayType={\"text\"}\r\n            thousandSeparator={true}\r\n          />\r\n        </td>\r\n        <td className={isNewCases}>\r\n          {\" \"}\r\n          <NumberFormat\r\n            value={data.todayCases}\r\n            displayType={\"text\"}\r\n            thousandSeparator={true}\r\n          />\r\n        </td>\r\n\r\n        <td  className=\"datas\">\r\n          {casesSign}\r\n\r\n          <NumberFormat\r\n            value={data.deaths}\r\n            displayType={\"text\"}\r\n            thousandSeparator={true}\r\n          />\r\n        </td>\r\n        <td className={isNewDeath}>\r\n          {\" \"}\r\n          {deathSign}\r\n          <NumberFormat\r\n            value={data.todayDeaths}\r\n            displayType={\"text\"}\r\n            thousandSeparator={true}\r\n          />\r\n        </td>\r\n        <td className=\"datas\">\r\n          {\" \"}\r\n          <NumberFormat\r\n            value={data.active}\r\n            displayType={\"text\"}\r\n            thousandSeparator={true}\r\n          />\r\n        </td>\r\n        <td className=\"datas\">\r\n          {\" \"}\r\n          <NumberFormat\r\n            value={data.tests}\r\n            displayType={\"text\"}\r\n            thousandSeparator={true}\r\n          />\r\n        </td>\r\n\r\n        <td className=\"datas\">\r\n          {\" \"}\r\n          <NumberFormat\r\n            value={data.testsPerOneMillion}\r\n            displayType={\"text\"}\r\n            thousandSeparator={true}\r\n          />\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n    return countries\r\n  }\r\n\r\nfunction table()\r\n{\r\n\r\n  const table = (\r\n    <>\r\n      <form onSubmit={submitHandler} style={{ textAlign: \"center\" }}>\r\n        <label>\r\n          Search:\r\n          <input\r\n            onChange={handleSearch}\r\n            type=\"text\"\r\n            name=\"searching\"\r\n            value={search}\r\n          />\r\n        </label>\r\n      </form>\r\n      <div style={{ overflow: \"scrollable\" }}>\r\n        <Table\r\n          className=\"table\"\r\n          striped\r\n          bordered\r\n          hover\r\n          variant=\"dark\"\r\n          style={{ maxWidth: 900 }}\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                State\r\n                <span\r\n                  onClick={() => {\r\n                    handleChange(\"state\");\r\n                  }}\r\n                >\r\n                  {image()}\r\n                </span>\r\n              </th>\r\n              <th>\r\n                Total cases\r\n                <span\r\n                  onClick={() => {\r\n                    handleChange(\"cases\");\r\n                  }}\r\n                >\r\n                  {image()}\r\n                </span>\r\n              </th>\r\n              <th>\r\n                New Cases\r\n                <span\r\n                  onClick={() => {\r\n                    handleChange(\"todayCases\");\r\n                  }}\r\n                >\r\n                  {image()}\r\n                </span>\r\n              </th>\r\n              <th>\r\n                Deaths\r\n                <span\r\n                  onClick={() => {\r\n                    handleChange(\"deaths\");\r\n                  }}\r\n                >\r\n                  {image()}\r\n                </span>\r\n              </th>\r\n              <th>\r\n                {\" \"}\r\n                New Deaths\r\n                <span\r\n                  onClick={() => {\r\n                    handleChange(\"todayDeaths\");\r\n                  }}\r\n                >\r\n                  {image()}\r\n                </span>\r\n              </th>\r\n              <th>\r\n                {\" \"}\r\n                Active\r\n                <span\r\n                  onClick={() => {\r\n                    handleChange(\"active\");\r\n                  }}\r\n                >\r\n                  {image()}\r\n                </span>\r\n              </th>\r\n              <th>\r\n                {\" \"}\r\n                Tests\r\n                <span\r\n                  onClick={() => {\r\n                    handleChange(\"tests\");\r\n                  }}\r\n                >\r\n                  {image()}\r\n                </span>\r\n              </th>\r\n              <th>\r\n                Tests/1M\r\n                <span\r\n                  onClick={() => {\r\n                    handleChange(\"testsPerOneMillion\");\r\n                  }}\r\n                >\r\n                  {image()}\r\n                </span>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{countries()}</tbody>\r\n        </Table>\r\n      </div>\r\n    </>\r\n  );\r\n  return table\r\n}\r\n\r\n  function show() {\r\n    return <div>{table()}</div>;\r\n  }\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinners\">\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"secondary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <Spinner animation=\"grow\" variant=\"warning\" />\r\n      </div>\r\n    );\r\n  else {\r\n    return <>{show()}</>;\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import Modal from \"react-bootstrap/Modal\";\r\nimport React, { useState } from \"react\";\r\nimport Charts from \"./Charts\";\r\nimport USA from \"./usastates\";\r\nimport \"./pop.css\";\r\n\r\nfunction Popup(props) {\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  if (props.name === \"USA\") {\r\n    return(\r\n    <>\r\n      <span style={{ cursor: \"pointer\" }} onClick={handleShow}>\r\n        {props.name}\r\n      </span>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={() => setShow(false)}\r\n        dialogClassName=\"modal-100w\"\r\n        size=\"xl\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            <span className=\"popUpHeader\"> {props.name} </span>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <USA />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span style={{ cursor: \"pointer\" }} onClick={handleShow}>\r\n        {props.name}\r\n      </span>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={() => setShow(false)}\r\n        dialogClassName=\"modal-100w\"\r\n        size=\"xl\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            <span className=\"popUpHeader\"> {props.name} </span>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Charts name={props.name} from={props.from} className=\"popCharts\" />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Popup;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Table from \"react-bootstrap/Table\";\nimport sort from \"./sort.png\";\nimport NumberFormat from \"react-number-format\";\nimport Popup from \"./popup\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport Charts from \"./Charts\";\nimport \"react-tabs/style/react-tabs.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nfunction App(props) {\n  const [results, setResults] = useState([]);\n  const [finalResults, setFinalResults] = useState([]);\n  const [type, setType] = useState(\"desc\");\n  var [search, setSearch] = useState(\"\");\n  const [isLoading, setIsloading] = useState(true);\n\n  const [url] = useState(props.name);\n\n  useEffect(() => {\n    fetch(url + \"?sort=cases\")\n      .then((res) => res.json())\n      .then((data) => {\n        setResults(data);\n        setFinalResults(data);\n\n        setIsloading(false);\n      });\n  }, [url]);\n\n  function countries()\n  {\n    const countries = results.map((data, i) => {\n      let isNewDeath = \"\";\n      let deathSign = \"\";\n      if (data.todayDeaths !== 0) {\n        isNewDeath = \"danger\";\n        deathSign = \"+\";\n      }\n      let isNewCases = \"\";\n      let casesSign = \"\";\n      if (data.todayCases !== 0) {\n        casesSign = \"+\";\n        isNewCases = \"casesNew\";\n      }\n  \n      return (\n        <tr key={i}>\n          <td className=\"country\">\n            <span style={{ height: `100%` }}>\n              <img src={data.countryInfo.flag} alt=\"flag\" width=\"20px\" />{\" \"}\n              <Popup name={data.country} from={\"small\"} />\n            </span>\n          </td>\n          <td>\n            {\" \"}\n            <NumberFormat\n              value={data.cases}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.deaths}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.recovered}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className={isNewCases}>\n            {casesSign}\n  \n            <NumberFormat\n              value={data.todayCases}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className={isNewDeath}>\n            {\" \"}\n            {deathSign}\n            <NumberFormat\n              value={data.todayDeaths}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.active}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.critical}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n  \n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.casesPerOneMillion}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.deathsPerOneMillion}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n  \n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.testsPerOneMillion}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n        </tr>\n      );\n    });\n    return countries\n  }\n \n\n  function handleChange(col) {\n    function compare(a, b) {\n      const bandA = a[col];\n      const bandB = b[col];\n\n      if (type !== \"asc\") {\n        let comparison = 0;\n        if (bandA > bandB) {\n          comparison = 1;\n        } else if (bandA < bandB) {\n          comparison = -1;\n        }\n        return comparison;\n      }\n      if (type === \"asc\") {\n        let comparison = 0;\n        if (bandA < bandB) {\n          comparison = 1;\n        } else if (bandA > bandB) {\n          comparison = -1;\n        }\n        return comparison;\n      }\n    }\n\n    const sortedBaz = results.slice().sort(compare);\n\n    setResults(sortedBaz);\n\n    type === \"asc\" ? setType(\"desc\") : setType(\"asc\");\n  }\n\n  function handleSearch(event) {\n    setSearch(event.target.value);\n\n    const filtered = finalResults.filter((each) =>\n      each.country.toUpperCase().startsWith(event.target.value.toUpperCase())\n    );\n    setResults(filtered);\n  }\n\n  function submitHandler(e) {\n    e.preventDefault();\n  }\n\n  function image()\n  {\n    const image = (\n      <img\n        src={sort}\n        style={{ cursor: \"pointer\" }}\n        alt=\"Logo\"\n        className=\"image\"\n      />\n    );\n    return image;\n  }\n\n  function table()\n  {\n    \n  const table = (\n    <>\n      <form onSubmit={submitHandler} style={{ textAlign: \"center\" }}>\n        <label>\n          Search:\n          <input\n            onChange={handleSearch}\n            type=\"text\"\n            name=\"searching\"\n            value={search}\n          />\n        </label>\n      </form>\n      <div style={{ overflow: \"scrollable\" }}>\n        <Table\n          className=\"table\"\n          striped\n          bordered\n          hover\n          variant=\"dark\"\n          style={{ maxWidth: 900 }}\n        >\n          <thead>\n            <tr>\n              <th>\n                Country\n                <span\n                  onClick={() => {\n                    handleChange(\"country\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Total cases\n                <span\n                  onClick={() => {\n                    handleChange(\"cases\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Deaths\n                <span\n                  onClick={() => {\n                    handleChange(\"deaths\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Recovered\n                <span\n                  onClick={() => {\n                    handleChange(\"recovered\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                {\" \"}\n                New cases\n                <span\n                  onClick={() => {\n                    handleChange(\"todayCases\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                {\" \"}\n                New deaths\n                <span\n                  onClick={() => {\n                    handleChange(\"todayDeaths\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                {\" \"}\n                Active cases\n                <span\n                  onClick={() => {\n                    handleChange(\"active\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Critical\n                <span\n                  onClick={() => {\n                    handleChange(\"critical\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Cases/1M\n                <span\n                  onClick={() => {\n                    handleChange(\"casesPerOneMillion\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Deaths/1M\n                <span\n                  onClick={() => {\n                    handleChange(\"deathsPerOneMillion\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Tests/1M\n                <span\n                  onClick={() => {\n                    handleChange(\"testsPerOneMillion\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>{countries()}</tbody>\n        </Table>\n      </div>\n    </>\n  );\n    return table;\n  }\n\n  function tabs()\n  {\n    const tabs = (\n      <Tabs className=\"tabs\">\n        <TabList>\n          <Tab>\n            {\" \"}\n            <Button variant=\"primary\"> All countries </Button>\n          </Tab>\n          <Tab>\n            {\" \"}\n            <Button variant=\"info\">Graphs</Button>\n          </Tab>\n        </TabList>\n  \n        <TabPanel>{table()}</TabPanel>\n        <TabPanel>\n          <Charts name=\"USA\" />\n        </TabPanel>\n      </Tabs>\n    );\n    return tabs;\n  }\n  \n  return isLoading ? (\n    <div className=\"spinners\">\n      {\" \"}\n      <Spinner animation=\"grow\" variant=\"primary\" />\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n      <Spinner animation=\"grow\" variant=\"success\" />\n      <Spinner animation=\"grow\" variant=\"danger\" />\n      <Spinner animation=\"grow\" variant=\"warning\" />\n    </div>\n  ) : (\n    <div className=\"whole\">{tabs()}</div>\n  );\n}\n\nexport default App;\n","import React, { useEffect, useState } from \"react\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\n\r\nfunction Main() {\r\n  let [latest, setLatest] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  useEffect( () => {\r\n    fetch(\"https://corona.lmao.ninja/v2/all\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setLatest(data);\r\n\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  function show() {\r\n    const date = new Date(parseInt(latest.updated));\r\n    const lastUpdated = date.toString();\r\n  \r\n    const header = (\r\n      <div className=\"deckss\">\r\n        <span className=\"worldWide\">World Wide</span>\r\n        <CardDeck className=\"deck\">\r\n          <Card\r\n            bg={\"secondary\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{ marginLeft: 3 }}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Cases</Card.Title>\r\n              <Card.Text>\r\n                <NumberFormat\r\n                  value={latest.cases}\r\n                  displayType={\"text\"}\r\n                  thousandSeparator={true}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card bg={\"danger\"} text={\"white\"} className=\"text-center\" style={{}}>\r\n            <Card.Body>\r\n              <Card.Title>Deaths</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <NumberFormat\r\n                  value={latest.deaths}\r\n                  displayType={\"text\"}\r\n                  thousandSeparator={true}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card\r\n            bg={\"success\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{}}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Recovered</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <NumberFormat\r\n                  value={latest.recovered}\r\n                  displayType={\"text\"}\r\n                  thousandSeparator={true}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n        </CardDeck>\r\n      </div>\r\n    );\r\n\r\n    return header;\r\n  }\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinners\">\r\n        {\" \"}\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"secondary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <Spinner animation=\"grow\" variant=\"warning\" />\r\n      </div>\r\n    );\r\n  return <div> {show()}</div>;\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react'\r\nimport App from './App';\r\nimport Header from'./header'\r\n\r\n\r\nfunction main(props) {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <App name=\"https://corona.lmao.ninja/v2/countries\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default main\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './main';\n\n\n\nReactDOM.render(\n \n    <Main />,\n  \n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/sort.6a59f831.png\";"],"sourceRoot":""}