{"version":3,"sources":["App.js","serviceWorker.js","index.js","sort.png"],"names":["App","useState","latest","setLatest","results","setResults","type","setType","useEffect","axios","all","get","then","res","data","orderBy","lastUpdated","Date","parseInt","updated","toString","countries","map","i","isNewDeath","todayDeaths","isNewCases","className","country","cases","deaths","recovered","todayCases","active","critical","handleChange","col","image","src","sort","alt","CardDeck","Card","bg","text","style","margin","Body","Title","Text","Footer","Table","striped","bordered","hover","variant","maxWidth","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.fda2b551.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Card from \"react-bootstrap/Card\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Table from \"react-bootstrap/Table\";\nimport orderBy from \"lodash/orderBy\";\nimport sort from './sort.png'; \n\nfunction App() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [type, setType] = useState(\"desc\");\n\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/all\"),\n        axios.get(\"https://corona.lmao.ninja/countries\"),\n      ])\n\n      .then((res) => {\n        setLatest(res[0].data);\n        setResults(orderBy(res[1].data, [\"cases\"], [\"desc\"]));\n       \n      });\n  }, []);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n \n  const countries = results.map((data, i) => {\n    let isNewDeath = \"\";\n    if(data.todayDeaths!=0)\n    {\n      isNewDeath = \"danger\"\n    }\n    let isNewCases = \"\";\n    if(data.todayDeaths!=0)\n    {\n      isNewCases = \"casesNew\"\n    }\n    return (\n      <tr>\n        <td className=\"country\">{data.country} </td>\n        <td > {data.cases}</td>\n        <td className=\"datas\">{data.deaths}</td>\n        <td className=\"datas\">{data.recovered}</td>\n        <td className={isNewCases}>{data.todayCases}</td>\n        <td className={isNewDeath}>{data.todayDeaths}</td>\n        <td className=\"datas\">{data.active}</td>\n        <td className=\"datas\">{data.critical}</td>\n      </tr>\n    );\n  });\n\n  function handleChange(col) {\n    \n    type===\"asc\"?setType(\"desc\"):setType(\"asc\")\n\n    setResults(orderBy(results, [col], [type]));\n  }\n\n  const image =   <img src={sort} alt=\"Logo\" className= \"image\"/>;\n\n\n  return (\n    <div>\n      \n      <CardDeck>\n        <Card\n          bg={\"secondary\"}\n          text={\"white\"}\n          className=\"text-center\"\n          style={{ margin: 10 }}\n        >\n          <Card.Body>\n            <Card.Title>Cases</Card.Title>\n            <Card.Text>{latest.cases}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated: {lastUpdated}}</small>\n          </Card.Footer>\n        </Card>\n        <Card\n          bg={\"danger\"}\n          text={\"white\"}\n          className=\"text-center\"\n          style={{ margin: 10 }}\n        >\n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>{latest.deaths}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated: {lastUpdated}}</small>\n          </Card.Footer>\n        </Card>\n        <Card\n          bg={\"success\"}\n          text={\"white\"}\n          className=\"text-center\"\n          style={{ margin: 10 }}\n        >\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>{latest.recovered}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated: {lastUpdated}}</small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n\n      <Table\n        className=\"table\"\n        striped\n        bordered\n        hover\n        variant=\"dark\"\n        style={{ maxWidth: 1000 }}\n      >\n        <thead>\n          <tr>\n            <th\n              onClick={() => {\n                handleChange(\"country\");\n              }}\n            >\n              Country\n            {image}\n            </th>\n            <th\n              onClick={() => {\n                handleChange(\"cases\");\n              }}\n            >\n              Total cases\n              {image}\n            </th>\n            <th\n              onClick={() => {\n                handleChange(\"deaths\");\n              }}\n            >\n              Deaths\n              {image}\n            </th>\n            <th\n              onClick={() => {\n                handleChange(\"recovered\");\n              }}\n            >\n              Recovered\n              {image}\n            </th>\n            <th\n              onClick={() => {\n                handleChange(\"todayCases\");\n              }}\n            >\n              New cases\n              {image}\n            </th>\n            <th\n              onClick={() => {\n                handleChange(\"todayDeaths\");\n              }}\n            >\n              New deaths\n              {image}\n            </th>\n            <th\n              onClick={() => {\n                handleChange(\"active\");\n              }}\n            >\n              Recovered\n              {image}\n            </th>\n            <th\n              onClick={() => {\n                handleChange(\"critical\");\n              }}\n            >\n              Critical{image}\n              \n            </th>\n          </tr>\n        </thead>\n        <tbody>{countries}</tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sort.6a59f831.png\";"],"sourceRoot":""}