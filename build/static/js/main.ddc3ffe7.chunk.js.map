{"version":3,"sources":["Charts.js","usastatescharts.js","popup.js","usastates.js","map.js","header.js","App.js","main.js","index.js","sort.png"],"names":["Charts","props","lastDate","useState","loading","setLoading","currentGraph","setCurrentGraph","currentType","setCurrenType","showAll","setShowAll","numDays","setNumdays","toBeAdded","setToBeAdded","countryList","setCountryList","test","setTest","graphType","setGraphType","testing","needed","casesArray","deathsArray","recoveredArray","countries","first","forEach","element","includes","country","historyData","timeline","dates","Object","keys","cases","values","deaths","recovered","i","length","push","n","lastIndexOf","substring","showFoot","className","returnLines","temp","TestGraph","Line","Bar","Area","dataKey","stroke","stringToColour","fill","dot","map","each","key","useEffect","fetch","headers","accept","then","res","json","data","console","log","search","name","from","str","hash","charCodeAt","colour","j","toString","substr","handleList","e","removeFromList","target","value","handleType","show3","changeDays","event","handleTypes","type","onClick","temporary","onSubmit","preventDefault","min","max","placeholder","style","width","onInput","checked","onChange","returnCountryList","full","again","Set","ele","add","Array","toDelete","index","indexOf","splice","Spinner","animation","variant","disabled","toadd","old","secondList","dropdown0","displayGraphMenu","LineChart","BarChart","AreaChart","PieChart","ComposedChart","current","toShow","charAt","toUpperCase","slice","height","strokeDasharray","syncId","renderLineChart","USACharts","color","filter","Popup","show","setShow","handleShow","cursor","Modal","onHide","dialogClassName","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Main","latest","setLatest","results","setResults","setSearch","setType","handleSearch","filtered","state","startsWith","image","src","sort","alt","submitHandler","handleChange","col","sortedBaz","a","b","bandA","bandB","comparison","table","textAlign","overflow","Table","striped","bordered","hover","maxWidth","isNewDeath","deathSign","todayDeaths","isNewCases","casesSign","todayCases","displayType","thousandSeparator","active","tests","testsPerOneMillion","Map","lati","setLeti","lngi","setLngi","navigator","geolocation","getCurrentPosition","pos","crd","coords","longitude","latitude","err","warn","code","message","center","lat","lng","countyMap","countryInfo","long","flag","form","bootstrapURLKeys","defaultCenter","defaultZoom","lastUpdated","Date","parseInt","updated","CardDeck","Card","bg","text","marginLeft","Text","end","duration","separator","Footer","App","finalResults","setFinalResults","isLoading","setIsloading","url","critical","casesPerOneMillion","deathsPerOneMillion","Button","main","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ddc3ffe7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./charts.css\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport \"./charts.css\";\r\n\r\nimport {\r\n  LineChart,\r\n  Bar,\r\n  BarChart,\r\n  Pie,\r\n  PieChart,\r\n  Area,\r\n  AreaChart,\r\n  ComposedChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nfunction Charts(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentGraph, setCurrentGraph] = useState();\r\n  const [currentType, setCurrenType] = useState(\"confirmed\");\r\n  const [showAll, setShowAll] = useState(false);\r\n  const [numDays, setNumdays] = useState(30);\r\n\r\n  const [toBeAdded, setToBeAdded] = useState([\"USA\"]);\r\n  const [countryList, setCountryList] = useState([\"USA\"]);\r\n\r\n  const [test, setTest] = useState([]);\r\n  const [graphType, setGraphType] = useState(\"Line\");\r\n\r\n  var lastDate;\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://corona.lmao.ninja/v2/historical?lastdays=${numDays}`,\r\n      { headers: { accept: \"Accept: application/json\" } }\r\n      \r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTest(data);\r\n        console.log('aaaaaaa')\r\n        setLoading(false);\r\n        var search = props.name;\r\n        if (props.from === \"small\") {\r\n          setCurrentGraph(props.name);\r\n          setCountryList([props.name]);\r\n        }\r\n        setCurrentGraph(search);\r\n      });\r\n\r\n    // eslint-disable-next-line\r\n  }, [numDays]);\r\n\r\n  function testing(needed) {\r\n    var casesArray = [];\r\n    var deathsArray = [];\r\n    var recoveredArray = [];\r\n    var countries = countryList;\r\n    var first = \"true\";\r\n\r\n    test.forEach((element) => {\r\n      if (countries.includes(element.country)) {\r\n        var historyData = { ...element.timeline };\r\n\r\n        var dates = Object.keys(historyData.cases);\r\n        var cases = Object.values(historyData.cases);\r\n        var deaths = Object.values(historyData.deaths);\r\n        var recovered = Object.values(historyData.recovered);\r\n\r\n        for (var i = 0; i < dates.length; i++) {\r\n          if (casesArray.length < cases.length) {\r\n            casesArray.push({});\r\n            deathsArray.push({});\r\n            recoveredArray.push({});\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dates.length; i++) {\r\n          if (first) {\r\n            var n = dates[i].lastIndexOf(\"/\");\r\n            casesArray[i][\"date\"] = dates[i].substring(0, n);\r\n            deathsArray[i][\"date\"] = dates[i].substring(0, n);\r\n            recoveredArray[i][\"date\"] = dates[i].substring(0, n);\r\n\r\n            lastDate = dates[i];\r\n          }\r\n\r\n          casesArray[i][element.country] = cases[i];\r\n          deathsArray[i][element.country] = deaths[i];\r\n          recoveredArray[i][element.country] = recovered[i];\r\n        }\r\n        first = false;\r\n      }\r\n    });\r\n\r\n    if (currentType === \"confirmed\" && needed === \"confirmed\") {\r\n      return casesArray;\r\n    }\r\n\r\n    if (currentType === \"recovered\" || needed === \"recovered\") {\r\n      return recoveredArray;\r\n    }\r\n    if (currentType === \"deaths\" || needed === \"deaths\") {\r\n      return deathsArray;\r\n    }\r\n  }\r\n\r\n  function showFoot() {\r\n    let fixed = (\r\n      <span className=\"graphMessage\">Graph last updated on : {lastDate}</span>\r\n    );\r\n\r\n    return fixed;\r\n  }\r\n\r\n  function returnLines() {\r\n    var temp;\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return Line;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return Bar;\r\n      }\r\n\r\n      if (graphType === \"Area\") {\r\n        return Area;\r\n      }\r\n\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n    if (countryList.length === 1) {\r\n      temp = (\r\n        <TestGraph\r\n          dataKey={countryList[0]}\r\n          stroke={stringToColour(countryList[0])}\r\n          fill={stringToColour(countryList[0])}\r\n          dot={false}\r\n        />\r\n      );\r\n    }\r\n    if (countryList.length > 1) {\r\n      temp = countryList.map((each) => {\r\n        return (\r\n          <TestGraph\r\n            key={each}\r\n            dataKey={each}\r\n            stroke={stringToColour(each)}\r\n            fill={stringToColour(each)}\r\n            dot={false}\r\n          />\r\n        );\r\n      });\r\n    }\r\n\r\n    return temp;\r\n  }\r\n\r\n  var stringToColour = function (str) {\r\n    var hash = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    var colour = \"#\";\r\n    for (var j = 0; j < 3; j++) {\r\n      var value = (hash >> (j * 8)) & 0xff;\r\n      colour += (\"00\" + value.toString(16)).substr(-2);\r\n    }\r\n    return colour;\r\n  };\r\n\r\n  function renderLineChart() {\r\n    var width;\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return LineChart;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return BarChart;\r\n      }\r\n      if (graphType === \"Area\") {\r\n        return AreaChart;\r\n      }\r\n      if (graphType === \"Pie\") {\r\n        return PieChart;\r\n      }\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return ComposedChart;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n    if (props.from === \"small\") {\r\n      width = \"120%\";\r\n    }\r\n\r\n    if (!showAll) {\r\n      var current = testing(\"confirmed\");\r\n\r\n      var toShow = currentType.charAt(0).toUpperCase() + currentType.slice(1);\r\n\r\n      return (\r\n        <div className=\"graphs\">\r\n          <div>\r\n            {\" \"}\r\n            <h3>{toShow} </h3>\r\n            <ResponsiveContainer width={width} height={400}>\r\n              <TestGraph data={current}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n\r\n                {returnLines()}\r\n              </TestGraph>\r\n            </ResponsiveContainer>\r\n            {showFoot()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"graphs\">\r\n        <div>\r\n          {\" \"}\r\n          <h3>Confirmed </h3>\r\n          <ResponsiveContainer width=\"95%\" height={400}>\r\n            <TestGraph data={testing(\"confirmed\")} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              syncId=\"anyId\"\r\n              {returnLines()}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <h3>Recovered </h3>\r\n          <ResponsiveContainer width=\"95%\" height={400}>\r\n            <TestGraph data={testing(\"recovered\")} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n\r\n              {returnLines()}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <h3>Deaths </h3>\r\n          <ResponsiveContainer width=\"95%\" height={400}>\r\n            <TestGraph data={testing(\"deaths\")} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n\r\n              {returnLines()}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n        </div>\r\n\r\n        {showFoot()}\r\n      </div>\r\n    );\r\n  }\r\n  function handleList(e) {\r\n    removeFromList(currentGraph);\r\n    setCountryList([...countryList, e.target.value]);\r\n    setCurrentGraph(e.target.value);\r\n  }\r\n\r\n  function handleType(e) {\r\n    setCurrenType(e.target.value);\r\n  }\r\n\r\n  function show3() {\r\n    showAll ? setShowAll(false) : setShowAll(true);\r\n  }\r\n\r\n  function changeDays(event) {\r\n    setNumdays(event.target.value);\r\n  }\r\n\r\n  function handleTypes() {\r\n    if (!showAll) {\r\n      return (\r\n        <>\r\n          <form>\r\n            <input\r\n              type=\"radio\"\r\n              value=\"confirmed\"\r\n              checked={currentType == \"confirmed\"}\r\n              onChange={handleType}\r\n              name=\"type\"\r\n            />\r\n            Confirmed{\"  \"}\r\n            <input\r\n              type=\"radio\"\r\n              value=\"deaths\"\r\n              onChange={handleType}\r\n              name=\"type\"\r\n            />\r\n            Deaths{\"  \"}\r\n            <input\r\n              type=\"radio\"\r\n              value=\"recovered\"\r\n              onChange={handleType}\r\n              name=\"type\"\r\n            />\r\n            Recovered{\"  \"}\r\n            <button type=\"button\" onClick={(e) => show3(e)}>\r\n              {temporary()}\r\n            </button>\r\n          </form>\r\n\r\n          <form onSubmit={(e) => e.preventDefault()}>\r\n          \r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"200\"\r\n              placeholder={numDays}\r\n              style={{ width: 50 }}\r\n              onChange={changeDays}\r\n            /> days\r\n          </form>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {\" \"}\r\n        <button type=\"button\" onClick={(e) => show3(e)}>\r\n          {temporary()}\r\n        </button>\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n         \r\n          <input\r\n            type=\"number\"\r\n            min=\"0\"\r\n            max=\"200\"\r\n            placeholder={numDays}\r\n            style={{ width: 50 }}\r\n            onInput={changeDays}\r\n          /> days \r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function returnCountryList() {\r\n    var full = Object.values(test);\r\n    let again = new Set();\r\n    full.map((ele, i) => {\r\n      return again.add(ele.country);\r\n    });\r\n    return Array.from(again);\r\n  }\r\n\r\n  function addToList(toadd) {\r\n    if (countryList.includes(toadd + \"\")) {\r\n    } else {\r\n      setCountryList((old) => [...old, toadd]);\r\n    }\r\n  }\r\n\r\n  function isFrom() {\r\n    if (props.from !== \"small\") {\r\n      return (\r\n        <>\r\n          <form onSubmit={(e) => e.preventDefault}>\r\n            <label>Country:</label>\r\n\r\n            <select\r\n              value={currentGraph}\r\n              onChange={handleList}\r\n              className=\"selectList\"\r\n            >\r\n              <option disabled>Select Country to compare</option>\r\n              {returnCountryList().map((value, i) => (\r\n                <option value={value} key={i}>\r\n                  {value}\r\n                </option>\r\n              ))}\r\n              ))}\r\n            </select>\r\n            {secondList()}\r\n          </form>\r\n\r\n          {handleTypes()}\r\n          {displayGraphMenu()}\r\n          <div className=\"cover\">\r\n            {\" \"}\r\n            Click to remove: {showCurrentCountries()}\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n    return handleTypes();\r\n  }\r\n  function temporary() {\r\n    var temporary = showAll ? \"Show confirmed\" : \"Show All\";\r\n    return temporary;\r\n  }\r\n\r\n  function secondList() {\r\n    if (countryList.length !== 0) {\r\n      return (\r\n        <>\r\n          {\" \"}\r\n          <select\r\n            className=\"selectList\"\r\n            name=\"country\"\r\n            onChange={(e) => {\r\n              setToBeAdded(e.target.value);\r\n            }}\r\n          >\r\n            <option checked> Select Country</option>\r\n            {returnCountryList().map((value, i) => (\r\n              <option value={value} key={i}>\r\n                {value}\r\n              </option>\r\n            ))}\r\n            ))}\r\n          </select>\r\n          <button type=\"button\" onClick={(e) => addToList(toBeAdded)}>\r\n            Add to Graph\r\n          </button>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n\r\n  function removeFromList(toDelete) {\r\n    var index = countryList.indexOf(toDelete);\r\n\r\n    if (index !== -1) {\r\n      countryList.splice(index, 1);\r\n    }\r\n    setCountryList([...countryList]);\r\n  }\r\n\r\n  function showCurrentCountries() {\r\n    return countryList.map((each) => (\r\n      <span\r\n        key={each}\r\n        className=\"displayedList\"\r\n        onClick={() => removeFromList(each)}\r\n      >\r\n        {each}{\" \"}\r\n      </span>\r\n    ));\r\n  }\r\n\r\n  function displayGraphMenu() {\r\n    function handleChange(e) {\r\n      setGraphType(e.target.value);\r\n    }\r\n\r\n    var dropdown0 = (\r\n      <>\r\n        <select onChange={handleChange}>\r\n          <option value={\"Line\"}> Line</option>\r\n          <option value={\"Bar\"}> Bar</option>\r\n          <option value={\"Area\"}> Area</option>\r\n\r\n          {/* <option value={\"Composed\"}> Composed</option> */}\r\n        </select>\r\n      </>\r\n    );\r\n\r\n    return <form>Graph type: {dropdown0}</form>;\r\n  }\r\n\r\n  return loading ? (\r\n    <div className=\"spinners\">\r\n      {\" \"}\r\n      <Spinner animation=\"grow\" variant=\"primary\" />\r\n      <Spinner animation=\"grow\" variant=\"secondary\" />\r\n      <Spinner animation=\"grow\" variant=\"success\" />\r\n      <Spinner animation=\"grow\" variant=\"danger\" />\r\n      <Spinner animation=\"grow\" variant=\"warning\" />\r\n      <Spinner animation=\"grow\" variant=\"info\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"chartsNew\">\r\n      {isFrom()}\r\n\r\n      {renderLineChart()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Charts;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./charts.css\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport \"./charts.css\";\r\n\r\nimport {\r\n  LineChart,\r\n  Bar,\r\n  BarChart,\r\n  Pie,\r\n  PieChart,\r\n  Area,\r\n  AreaChart,\r\n  ComposedChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nfunction USACharts(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentGraph] = useState(props.name);\r\n\r\n  const [test, setTest] = useState([]);\r\n  const [graphType, setGraphType] = useState(\"Line\");\r\n\r\n  var lastDate;\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://corona.lmao.ninja/v2/nyt/states`,\r\n      { headers: { accept: \"Accept: application/json\" } }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTest(data);\r\n\r\n        setLoading(false);\r\n      });\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  function testing(needed) {\r\n    var testAgain = test.filter((e) => {\r\n      //console.log(currentGraph+\" \"+(e[\"state\"])+\"=\"+(e[\"state\"]===currentGraph))\r\n\r\n      if (e[\"state\"] === currentGraph) {\r\n        lastDate = e[\"date\"];\r\n       \r\n      }\r\n      return e[\"state\"] === currentGraph;\r\n    });\r\n    return testAgain;\r\n  }\r\n\r\n  function showFoot() {\r\n    let fixed = (\r\n      <span className=\"graphMessage\">Graph last updated on : {lastDate}</span>\r\n    );\r\n\r\n    return fixed;\r\n  }\r\n\r\n  function returnLines(type) {\r\n    var temp;\r\n    var color = \"red\";\r\n    if(type==='cases')\r\n    {\r\n      color = 'blue'\r\n    }\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return Line;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return Bar;\r\n      }\r\n\r\n      if (graphType === \"Area\") {\r\n        return Area;\r\n      }\r\n\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n\r\n    temp = (\r\n      <TestGraph\r\n        dataKey={type}\r\n        stroke={color}\r\n        fill={color}\r\n        dot={false}\r\n      />\r\n    );\r\n\r\n    return temp;\r\n  }\r\n\r\n\r\n  function renderLineChart() {\r\n    var width;\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return LineChart;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return BarChart;\r\n      }\r\n      if (graphType === \"Area\") {\r\n        return AreaChart;\r\n      }\r\n      if (graphType === \"Pie\") {\r\n        return PieChart;\r\n      }\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return ComposedChart;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n    if (props.from === \"small\") {\r\n      width = \"120%\";\r\n    }\r\n    var data = testing();\r\n\r\n    return (\r\n      <div className=\"graphs\">\r\n        <div>\r\n          {\" \"}\r\n          <ResponsiveContainer width={width} height={400}>\r\n            <TestGraph data={data} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              syncId=\"anyId\"\r\n              {returnLines(\"cases\")}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n          {showFoot()}\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <ResponsiveContainer width={width} height={400}>\r\n            <TestGraph data={data} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n\r\n              {returnLines(\"deaths\")}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n          {showFoot()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayGraphMenu() {\r\n    function handleChange(e) {\r\n      setGraphType(e.target.value);\r\n    }\r\n\r\n    var dropdown0 = (\r\n      <>\r\n        <select onChange={handleChange}>\r\n          <option value={\"Line\"}> Line</option>\r\n          <option value={\"Bar\"}> Bar</option>\r\n          <option value={\"Area\"}> Area</option>\r\n\r\n          {/* <option value={\"Composed\"}> Composed</option> */}\r\n        </select>\r\n      </>\r\n    );\r\n\r\n    return <form>Graph type: {dropdown0}</form>;\r\n  }\r\n\r\n  return loading ? (\r\n    <div className=\"spinners\">\r\n      {\" \"}\r\n      <Spinner animation=\"grow\" variant=\"primary\" />\r\n      <Spinner animation=\"grow\" variant=\"secondary\" />\r\n      <Spinner animation=\"grow\" variant=\"success\" />\r\n      <Spinner animation=\"grow\" variant=\"danger\" />\r\n      <Spinner animation=\"grow\" variant=\"warning\" />\r\n      <Spinner animation=\"grow\" variant=\"info\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"chartsNew\">\r\n      {displayGraphMenu()}\r\n      {renderLineChart()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default USACharts;\r\n","import Modal from \"react-bootstrap/Modal\";\r\nimport React, { useState } from \"react\";\r\nimport Charts from \"./Charts\";\r\n\r\nimport \"./pop.css\";\r\nimport './App.css'\r\nimport USACHARTS from './usastatescharts'\r\n\r\nfunction Popup(props) {\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  if (props.type === \"state\") {\r\n\r\n    return(\r\n    <>\r\n      <span style={{ cursor: \"pointer\" }} onClick={handleShow}>\r\n        {props.name}\r\n      </span>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={() => setShow(false)}\r\n        dialogClassName=\"modal-100w\"\r\n        size=\"xl\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            <span className=\"popUpHeader\"> {props.name} </span>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <USACHARTS name = {props.name}/>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span style={{ cursor: \"pointer\" }} onClick={handleShow}>\r\n        {props.name}\r\n      </span>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={() => setShow(false)}\r\n        dialogClassName=\"modal-100w\"\r\n        size=\"xl\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            <span className=\"popUpHeader\"> {props.name} </span>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Charts name={props.name} from={props.from} className=\"popCharts\" />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Popup;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport sort from \"./sort.png\";\r\nimport Popup from \"./popup\";\r\n//import json from './usaAll.json'\r\n\r\nfunction Main() {\r\n  let [latest, setLatest] = useState([]);\r\n  let [results, setResults] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  var [search, setSearch] = useState(\"\");\r\n  const [type, setType] = useState(\"desc\");\r\n  useEffect(() => {\r\n    fetch(\r\n      \"https://cors-anywhere.herokuapp.com/https://corona.lmao.ninja/v2/states?sort=cases\",\r\n      { headers: { accept: \"Accept: application/json\" } }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setLatest(data);\r\n        setResults(data);\r\n        console.log('aa')\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  function handleSearch(event) {\r\n    setSearch(event.target.value);\r\n\r\n    const filtered = latest.filter((each) => {\r\n      return each.state\r\n        .toUpperCase()\r\n        .startsWith(event.target.value.toUpperCase());\r\n    });\r\n\r\n    setResults(filtered);\r\n  }\r\n\r\n  function image() {\r\n    const image = (\r\n      <img\r\n        src={sort}\r\n        style={{ cursor: \"pointer\" }}\r\n        alt=\"Logo\"\r\n        className=\"image\"\r\n      />\r\n    );\r\n    return image;\r\n  }\r\n\r\n  function submitHandler(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  function handleChange(col) {\r\n    function compare(a, b) {\r\n      const bandA = a[col];\r\n      const bandB = b[col];\r\n\r\n      if (type !== \"asc\") {\r\n        let comparison = 0;\r\n        if (bandA > bandB) {\r\n          comparison = 1;\r\n        } else if (bandA < bandB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n      if (type === \"asc\") {\r\n        let comparison = 0;\r\n        if (bandA < bandB) {\r\n          comparison = 1;\r\n        } else if (bandA > bandB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n    }\r\n\r\n    const sortedBaz = results.slice().sort(compare);\r\n\r\n    setResults(sortedBaz);\r\n\r\n    type === \"asc\" ? setType(\"desc\") : setType(\"asc\");\r\n  }\r\n\r\n  function countries() {\r\n    const countries = results.map((data, i) => {\r\n      let isNewDeath = \"\";\r\n      let deathSign = \"\";\r\n      if (data.todayDeaths !== 0) {\r\n        isNewDeath = \"danger\";\r\n        deathSign = \"+\";\r\n      }\r\n      let isNewCases = \"\";\r\n      let casesSign = \"\";\r\n      if (data.todayCases !== 0) {\r\n        casesSign = \"+\";\r\n        isNewCases = \"casesNew\";\r\n      }\r\n\r\n      return (\r\n        <tr key={i}>\r\n          <td className=\"country\">\r\n            <span style={{ height: `100%` }}>\r\n              {\" \"}\r\n              <Popup name={data.state} type = 'state' from={\"small\"} />\r\n            </span>\r\n          </td>\r\n          <td>\r\n            {\" \"}\r\n            <NumberFormat\r\n              value={data.cases}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n          <td className={isNewCases}>\r\n            {\" \"}\r\n            {casesSign}\r\n            <NumberFormat\r\n              value={data.todayCases}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n\r\n          <td className=\"datas\">\r\n            \r\n\r\n            <NumberFormat\r\n              value={data.deaths}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n          <td className={isNewDeath}>\r\n            {\" \"}\r\n            {deathSign}\r\n            <NumberFormat\r\n              value={data.todayDeaths}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n          <td className=\"datas\">\r\n            {\" \"}\r\n            <NumberFormat\r\n              value={data.active}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n          <td className=\"datas\">\r\n            {\" \"}\r\n            <NumberFormat\r\n              value={data.tests}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n\r\n          <td className=\"datas\">\r\n            {\" \"}\r\n            <NumberFormat\r\n              value={data.testsPerOneMillion}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n    return countries;\r\n  }\r\n\r\n  function table() {\r\n    const table = (\r\n      <>\r\n        <form onSubmit={submitHandler} style={{ textAlign: \"center\" }}>\r\n          <label>\r\n            Search:\r\n            <input\r\n              onChange={handleSearch}\r\n              type=\"text\"\r\n              name=\"searching\"\r\n              value={search}\r\n            />\r\n          </label>\r\n        </form>\r\n        <div style={{ overflow: \"scrollable\" }}>\r\n          <Table\r\n            className=\"table\"\r\n            striped\r\n            bordered\r\n            hover\r\n            variant=\"dark\"\r\n            style={{ maxWidth: 900 }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>\r\n                  State\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"state\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  Total cases\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"cases\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  New Cases\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"todayCases\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  Deaths\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"deaths\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  {\" \"}\r\n                  New Deaths\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"todayDeaths\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  {\" \"}\r\n                  Active\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"active\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  {\" \"}\r\n                  Tests\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"tests\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  Tests/1M\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"testsPerOneMillion\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{countries()}</tbody>\r\n          </Table>\r\n        </div>\r\n      </>\r\n    );\r\n    return table;\r\n  }\r\n\r\n  function show() {\r\n    return <div>{table()}</div>;\r\n  }\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinners\">\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"secondary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <Spinner animation=\"grow\" variant=\"warning\" />\r\n      </div>\r\n    );\r\n  else {\r\n    return <>{show()}</>;\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport \"./map.css\";\r\nimport Popup from \"./popup\";\r\nfunction Map(props) {\r\n  const [data, setData] = useState(props.data);\r\n  const [loading, setLoading] = useState(true);\r\n  const key = \"AIzaSyDU_NJQ-CJfd_KHcSxi9SuTAk3lO_B7jYg\";\r\n  var [lati, setLeti] = useState();\r\n  var [lngi, setLngi] = useState();\r\n  var [type, setType] = useState(\"cases\");\r\n\r\n  useEffect(() => {\r\n    function success(pos) {\r\n      var crd = pos.coords;\r\n\r\n      console.log(`Longitude: ${crd.longitude}`);\r\n\r\n      setLeti(crd.latitude);\r\n      setLngi(crd.longitude);\r\n\r\n      setLoading(false);\r\n    }\r\n\r\n    function error(err) {\r\n      console.warn(`ERROR(${err.code}): ${err.message}`);\r\n\r\n      setLeti(37);\r\n      setLngi(95);\r\n\r\n      setLoading(false);\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(success, error);\r\n\r\n    console.log(lati);\r\n  });\r\n\r\n  var center = { lat: lati, lng: lngi };\r\n  var countyMap = data.map((each) => {\r\n    return (\r\n      <div\r\n        className=\"marker\"\r\n        key={each.country}\r\n        lat={each.countryInfo.lat}\r\n        lng={each.countryInfo.long}\r\n      >\r\n         <Popup name={each.country} from={\"small\"} type = \"map\" />\r\n        <img className=\"flag\" src={each.countryInfo.flag} alt=\"country image\" />\r\n        <br />\r\n        {each[type]}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  var form = (\r\n    <>\r\n      {\" \"}\r\n      <input\r\n        type=\"radio\"\r\n        value=\"cases\"\r\n        onChange={handleChange}\r\n        checked={type == \"cases\"}\r\n      />{\" \"}\r\n      Cases <span> </span>\r\n      <input type=\"radio\" name=\"type\" value=\"deaths\" onChange={handleChange} />\r\n      Deaths<span> </span>\r\n      <input\r\n        type=\"radio\"\r\n        name=\"type\"\r\n        value=\"recovered\"\r\n        onChange={handleChange}\r\n      />\r\n      Recovered\r\n    </>\r\n  );\r\n\r\n  function handleChange(e) {\r\n    setType(e.target.value);\r\n  }\r\n  if (!loading) {\r\n    return (\r\n      <>\r\n        <div>\r\n          {form}\r\n          <div style={{ height: \"100vh\", width: \"100%\" }}>\r\n            <GoogleMapReact\r\n              bootstrapURLKeys={{ key: key }}\r\n              defaultCenter={center}\r\n              defaultZoom={4}\r\n            >\r\n              {countyMap}\r\n            </GoogleMapReact>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  return \"Loading...\";\r\n}\r\n\r\nexport default Map;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport NumberFormat from \"react-countup\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\n\r\nfunction Main() {\r\n  let [latest, setLatest] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  useEffect( () => {\r\n    fetch(\"https://corona.lmao.ninja/v2/all\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setLatest(data);\r\n        console.log('aaaaaaa')\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  function show() {\r\n    const date = new Date(parseInt(latest.updated));\r\n    const lastUpdated = date.toString();\r\n  \r\n    const header = (\r\n      <div className=\"deckss\">\r\n        <span className=\"worldWide\">World Wide</span>\r\n        <CardDeck className=\"deck\">\r\n          <Card\r\n            bg={\"secondary\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{ marginLeft: 3 }}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Cases</Card.Title>\r\n              <Card.Text>\r\n                <NumberFormat\r\n                  end={latest.cases}\r\n                  duration={1.5}\r\n                  separator={\",\"}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card bg={\"danger\"} text={\"white\"} className=\"text-center\" style={{}}>\r\n            <Card.Body>\r\n              <Card.Title>Deaths</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <NumberFormat\r\n                  end={latest.deaths}\r\n                  duration={1.5}\r\n                  separator={\",\"}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card\r\n            bg={\"success\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{}}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Recovered</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <NumberFormat\r\n                  end={latest.recovered}\r\n                  duration={1.5}\r\n                  separator={\",\"}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n        </CardDeck>\r\n      </div>\r\n    );\r\n\r\n    return header;\r\n  }\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinners\">\r\n        {\" \"}\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"secondary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <Spinner animation=\"grow\" variant=\"warning\" />\r\n      </div>\r\n    );\r\n  return <div> {show()}</div>;\r\n}\r\n\r\nexport default Main;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Table from \"react-bootstrap/Table\";\nimport sort from \"./sort.png\";\nimport NumberFormat from \"react-number-format\";\nimport Popup from \"./popup\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport Charts from \"./Charts\";\nimport \"react-tabs/style/react-tabs.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport USA from './usastates';\nimport Map from './map';\nimport Header from './header'\n\nfunction App(props) {\n  const [results, setResults] = useState([]);\n  const [finalResults, setFinalResults] = useState([]);\n  const [type, setType] = useState(\"desc\");\n  var [search, setSearch] = useState(\"\");\n  const [isLoading, setIsloading] = useState(true);\n\n  const [url] = useState(props.name);\n\n  useEffect(() => {\n    fetch(''+url + \"?sort=cases\", { headers: { accept: \"Accept: application/json\" } })\n      .then((res) => res.json())\n      .then((data) => {\n        setResults(data);\n        setFinalResults(data);\n        console.log('aaaaaaa')\n        setIsloading(false);\n      });\n  }, [url]);\n\n  function countries()\n  {\n    const countries = results.map((data, i) => {\n      let isNewDeath = \"\";\n      let deathSign = \"\";\n      if (data.todayDeaths !== 0) {\n        isNewDeath = \"danger\";\n        deathSign = \"+\";\n      }\n      let isNewCases = \"\";\n      let casesSign = \"\";\n      if (data.todayCases !== 0) {\n        casesSign = \"+\";\n        isNewCases = \"casesNew\";\n      }\n  \n      return (\n        <tr key={i}>\n          <td className=\"country\">\n            <span style={{ height: `100%` }}>\n              <img src={data.countryInfo.flag} alt=\"flag\" width=\"20px\" />{\" \"}\n              <Popup name={data.country} from={\"small\"} />\n            </span>\n          </td>\n          <td>\n            {\" \"}\n            <NumberFormat\n              value={data.cases}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.deaths}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.recovered}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className={isNewCases}>\n            {casesSign}\n  \n            <NumberFormat\n              value={data.todayCases}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className={isNewDeath}>\n            {\" \"}\n            {deathSign}\n            <NumberFormat\n              value={data.todayDeaths}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.active}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.critical}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n  \n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.casesPerOneMillion}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.deathsPerOneMillion}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n  \n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.testsPerOneMillion}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n        </tr>\n      );\n    });\n    return countries\n  }\n \n\n  function handleChange(col) {\n    function compare(a, b) {\n      const bandA = a[col];\n      const bandB = b[col];\n\n      if (type !== \"asc\") {\n        let comparison = 0;\n        if (bandA > bandB) {\n          comparison = 1;\n        } else if (bandA < bandB) {\n          comparison = -1;\n        }\n        return comparison;\n      }\n      if (type === \"asc\") {\n        let comparison = 0;\n        if (bandA < bandB) {\n          comparison = 1;\n        } else if (bandA > bandB) {\n          comparison = -1;\n        }\n        return comparison;\n      }\n    }\n\n    const sortedBaz = results.slice().sort(compare);\n\n    setResults(sortedBaz);\n\n    type === \"asc\" ? setType(\"desc\") : setType(\"asc\");\n  }\n\n  function handleSearch(event) {\n    setSearch(event.target.value);\n\n    const filtered = finalResults.filter((each) =>\n      each.country.toUpperCase().startsWith(event.target.value.toUpperCase())\n    );\n    setResults(filtered);\n  }\n\n  function submitHandler(e) {\n    e.preventDefault();\n  }\n\n  function image()\n  {\n    const image = (\n      <img\n        src={sort}\n        style={{ cursor: \"pointer\" }}\n        alt=\"Logo\"\n        className=\"image\"\n      />\n    );\n    return image;\n  }\n\n  function table()\n  {\n    \n  const table = (\n    <>\n      <form onSubmit={submitHandler} style={{ textAlign: \"center\" }}>\n        <label>\n          Search:\n          <input\n            onChange={handleSearch}\n            type=\"text\"\n            name=\"searching\"\n            value={search}\n          />\n        </label>\n      </form>\n      <div style={{ overflow: \"scrollable\" }}>\n        <Table\n          className=\"table\"\n          striped\n          bordered\n          hover\n          variant=\"dark\"\n          style={{ maxWidth: 900 }}\n        >\n          <thead>\n            <tr>\n              <th>\n                Country\n                <span\n                  onClick={() => {\n                    handleChange(\"country\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Total cases\n                <span\n                  onClick={() => {\n                    handleChange(\"cases\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Deaths\n                <span\n                  onClick={() => {\n                    handleChange(\"deaths\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Recovered\n                <span\n                  onClick={() => {\n                    handleChange(\"recovered\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                {\" \"}\n                New cases\n                <span\n                  onClick={() => {\n                    handleChange(\"todayCases\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                {\" \"}\n                New deaths\n                <span\n                  onClick={() => {\n                    handleChange(\"todayDeaths\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                {\" \"}\n                Active cases\n                <span\n                  onClick={() => {\n                    handleChange(\"active\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Critical\n                <span\n                  onClick={() => {\n                    handleChange(\"critical\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Cases/1M\n                <span\n                  onClick={() => {\n                    handleChange(\"casesPerOneMillion\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Deaths/1M\n                <span\n                  onClick={() => {\n                    handleChange(\"deathsPerOneMillion\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n              <th>\n                Tests/1M\n                <span\n                  onClick={() => {\n                    handleChange(\"testsPerOneMillion\");\n                  }}\n                >\n                  {image()}\n                </span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>{countries()}</tbody>\n        </Table>\n      </div>\n    </>\n  );\n    return table;\n  }\n\n  function tabs()\n  {\n    const tabs = (\n      <Tabs className=\"tabs\">\n        <TabList>\n\n          <Tab>\n            {\" \"}\n            <Button variant=\"primary\"> All countries </Button>\n          </Tab>\n          <Tab>\n            {\" \"}\n            <Button variant=\"warning\">World Map</Button>\n          </Tab>\n          <Tab>\n            {\" \"}\n            <Button variant=\"secondary\">USA States</Button>\n          </Tab>\n          <Tab>\n            {\" \"}\n            <Button variant=\"info\">Graphs</Button>\n          </Tab>\n         \n        </TabList>\n     \n        <TabPanel><Header/><br/> {table()}</TabPanel>\n        <TabPanel><Map data = {results}/></TabPanel>\n        <TabPanel><USA /></TabPanel>\n        <TabPanel>\n          <Charts name=\"USA\" />\n        </TabPanel>\n\n        \n        \n      </Tabs>\n    );\n    return tabs;\n  }\n  \n  return isLoading ? (\n    <div className=\"spinners\">\n      {\" \"}\n      <Spinner animation=\"grow\" variant=\"primary\" />\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n      <Spinner animation=\"grow\" variant=\"success\" />\n      <Spinner animation=\"grow\" variant=\"danger\" />\n      <Spinner animation=\"grow\" variant=\"warning\" />\n    </div>\n  ) : (\n    \n    <div className=\"whole\">{tabs()}</div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport App from './App';\r\n\r\n\r\n\r\nfunction main(props) {\r\n    return (\r\n        <div>\r\n            <App name=\"https://corona.lmao.ninja/v2/countries\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default main\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './main';\n\n\n\nReactDOM.render(\n \n    <Main />,\n  \n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/sort.6a59f831.png\";"],"sourceRoot":""}