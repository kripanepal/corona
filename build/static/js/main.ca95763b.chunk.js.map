{"version":3,"sources":["header.js","usastates.js","minChart.js","popup.js","Charts.js","counties.js","map.js","App.js","main.js","index.js","sort.png"],"names":["Main","props","useState","latest","setLatest","loading","setLoading","toShow","setToshow","search","decodeURI","window","location","pathname","split","pop","useEffect","toFetch","type","console","log","includes","fetch","then","res","json","data","className","Spinner","animation","variant","lastUpdated","Date","parseInt","updated","toString","CardDeck","Card","bg","text","style","marginLeft","Body","Title","Text","end","cases","duration","separator","Footer","deaths","recovered","show","results","setResults","setSearch","setType","handleSearch","event","target","value","filtered","filter","each","state","toUpperCase","startsWith","image","src","sort","cursor","alt","submitHandler","e","preventDefault","handleChange","col","sortedBaz","slice","a","b","bandA","bandB","comparison","table","onSubmit","textAlign","onChange","name","overflow","Table","striped","bordered","hover","maxWidth","onClick","map","i","isNewDeath","deathSign","todayDeaths","isNewCases","casesSign","todayCases","key","height","to","displayType","thousandSeparator","active","tests","testsPerOneMillion","headers","accept","Charts","lastDate","numDays","setNumdays","graphType","setGraphType","test","setTest","returnLines","str","TestGraph","Line","Bar","Area","dataKey","stroke","stringToColour","fill","dot","temp","county","renderLineChart","LineChart","BarChart","AreaChart","PieChart","ComposedChart","current","needed","casesArray","first","historyData","timeline","dates","Object","keys","values","length","push","n","lastIndexOf","substring","testing","width","strokeDasharray","changeDays","isFrom","displayGraphMenu","min","max","placeholder","dropdown0","checked","Popup","setShow","Modal","onHide","dialogClassName","size","aria-labelledby","centered","Header","closeButton","id","setCurrentGraph","currentType","setCurrenType","showAll","setShowAll","countryList","setCountryList","deathsArray","recoveredArray","countries","forEach","element","country","showFoot","from","hash","charCodeAt","colour","j","substr","returnCountryList","full","again","Set","ele","add","Array","handleType","defaultChecked","disabled","isMulti","opt","handleList","onInputChange","options","label","charAt","syncId","colSpan","stats","confirmed","tolook","province","Map","lati","setLeti","lngi","setLngi","navigator","geolocation","getCurrentPosition","pos","crd","coords","longitude","latitude","err","warn","code","message","center","lat","lng","countyMap","countryInfo","long","flag","form","bootstrapURLKeys","defaultCenter","defaultZoom","App","finalResults","setFinalResults","isLoading","setIsloading","pathTo","setPathTo","url","Button","path","exact","critical","casesPerOneMillion","deathsPerOneMillion","main","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ca95763b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport NumberFormat from \"react-countup\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nfunction Main(props) {\r\n  let [latest, setLatest] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  let [toShow, setToshow] = useState();\r\n  var search = decodeURI(window.location.pathname.split(\"/\").pop());\r\n \r\n\r\n  useEffect(() => {\r\n    var toFetch;\r\n   \r\n    if (props.type === \"main\") {\r\n      console.log(\"main\");\r\n      toFetch = \"https://corona.lmao.ninja/v2/all\";\r\n      setToshow(\"World Wide\")\r\n      \r\n    }\r\n\r\n    if (window.location.pathname.includes(\"state\")) {\r\n      console.log(\"satte\");\r\n      toFetch = `https://disease.sh/v2/states/${search}`;\r\n      setToshow(search)\r\n   \r\n    }\r\n    if (window.location.pathname.includes(\"country\")) {\r\n      console.log(\"country\");\r\n      toFetch = `https://disease.sh/v2/countries/${search}?yesterday=false&strict=false`;\r\n      setToshow(search)\r\n\r\n    }\r\n    fetch(toFetch)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setLatest(data);\r\n        console.log(\"aaaaaaa\");\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  function show() {\r\n    const date = new Date(parseInt(latest.updated));\r\n    const lastUpdated = date.toString();\r\n  console.log(search)\r\n    const header = (\r\n      <div className=\"deckss\">\r\n        <span className=\"worldWide\">{toShow}</span>\r\n        <CardDeck className=\"deck\">\r\n          <Card\r\n            bg={\"secondary\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{ marginLeft: 3 }}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Cases</Card.Title>\r\n              <Card.Text>\r\n                <NumberFormat\r\n                  end={latest.cases}\r\n                  duration={1.5}\r\n                  separator={\",\"}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card bg={\"danger\"} text={\"white\"} className=\"text-center\" style={{}}>\r\n            <Card.Body>\r\n              <Card.Title>Deaths</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <NumberFormat\r\n                  end={latest.deaths}\r\n                  duration={1.5}\r\n                  separator={\",\"}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card\r\n            bg={\"success\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{}}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Recovered</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <NumberFormat\r\n                  end={latest.recovered}\r\n                  duration={1.5}\r\n                  separator={\",\"}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n        </CardDeck>\r\n      </div>\r\n    );\r\n\r\n    return header;\r\n  }\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinners\">\r\n        {\" \"}\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"secondary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <Spinner animation=\"grow\" variant=\"warning\" />\r\n      </div>\r\n    );\r\n  return <div> {show()}</div>;\r\n}\r\n\r\nexport default Main;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport sort from \"./sort.png\";\r\nimport Popup from \"./popup\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\n\r\nfunction Main() {\r\n  let [latest, setLatest] = useState([]);\r\n  let [results, setResults] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  var [search, setSearch] = useState(\"\");\r\n  const [type, setType] = useState(\"desc\");\r\n  useEffect(() => {\r\n    fetch(\r\n      \"https://corona.lmao.ninja/v2/states?sort=cases\",\r\n      { headers: { accept: \"Accept: application/json\" } }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setLatest(data);\r\n        setResults(data);\r\n        console.log('aa')\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  function handleSearch(event) {\r\n    setSearch(event.target.value);\r\n\r\n    const filtered = latest.filter((each) => {\r\n      return each.state\r\n        .toUpperCase()\r\n        .startsWith(event.target.value.toUpperCase());\r\n    });\r\n\r\n    setResults(filtered);\r\n  }\r\n\r\n  function image() {\r\n    const image = (\r\n      <img\r\n        src={sort}\r\n        style={{ cursor: \"pointer\" }}\r\n        alt=\"Logo\"\r\n        className=\"image\"\r\n      />\r\n    );\r\n    return image;\r\n  }\r\n\r\n  function submitHandler(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  function handleChange(col) {\r\n    function compare(a, b) {\r\n      const bandA = a[col];\r\n      const bandB = b[col];\r\n\r\n      if (type !== \"asc\") {\r\n        let comparison = 0;\r\n        if (bandA > bandB) {\r\n          comparison = 1;\r\n        } else if (bandA < bandB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n      if (type === \"asc\") {\r\n        let comparison = 0;\r\n        if (bandA < bandB) {\r\n          comparison = 1;\r\n        } else if (bandA > bandB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n    }\r\n\r\n    const sortedBaz = results.slice().sort(compare);\r\n\r\n    setResults(sortedBaz);\r\n\r\n    type === \"asc\" ? setType(\"desc\") : setType(\"asc\");\r\n  }\r\n\r\n  function countries() {\r\n    const countries = results.map((data, i) => {\r\n      let isNewDeath = \"\";\r\n      let deathSign = \"\";\r\n      if (data.todayDeaths !== 0) {\r\n        isNewDeath = \"danger\";\r\n        deathSign = \"+\";\r\n      }\r\n      let isNewCases = \"\";\r\n      let casesSign = \"\";\r\n      if (data.todayCases !== 0) {\r\n        casesSign = \"+\";\r\n        isNewCases = \"casesNew\";\r\n      }\r\n\r\n      return (\r\n        <tr key={i}>\r\n          <td className=\"country\">\r\n            <span style={{ height: `100%` }}>\r\n              {\" \"}\r\n              <Link to={`/USA/state/`+data.state} > {data.state} </Link>\r\n            </span>\r\n          </td>\r\n          <td>\r\n            {\" \"}\r\n            <NumberFormat\r\n              value={data.cases}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n          <td className={isNewCases}>\r\n            {\" \"}\r\n            {casesSign}\r\n            <NumberFormat\r\n              value={data.todayCases}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n\r\n          <td className=\"datas\">\r\n            \r\n\r\n            <NumberFormat\r\n              value={data.deaths}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n          <td className={isNewDeath}>\r\n            {\" \"}\r\n            {deathSign}\r\n            <NumberFormat\r\n              value={data.todayDeaths}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n          <td className=\"datas\">\r\n            {\" \"}\r\n            <NumberFormat\r\n              value={data.active}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n          <td className=\"datas\">\r\n            {\" \"}\r\n            <NumberFormat\r\n              value={data.tests}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n\r\n          <td className=\"datas\">\r\n            {\" \"}\r\n            <NumberFormat\r\n              value={data.testsPerOneMillion}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n    return countries;\r\n  }\r\n\r\n  function table() {\r\n    const table = (\r\n      <>\r\n       <br/>\r\n        <form onSubmit={submitHandler} style={{ textAlign: \"center\" }}>\r\n          <label>\r\n            Search:\r\n            <input\r\n              onChange={handleSearch}\r\n              type=\"text\"\r\n              name=\"searching\"\r\n              value={search}\r\n            />\r\n          </label>\r\n        </form>\r\n        <div style={{ overflow: \"scrollable\" }}>\r\n          <Table\r\n            className=\"table\"\r\n            striped\r\n            bordered\r\n            hover\r\n            variant=\"dark\"\r\n            style={{ maxWidth: 900 }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>\r\n                  State\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"state\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  Total cases\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"cases\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  New Cases\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"todayCases\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  Deaths\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"deaths\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  {\" \"}\r\n                  New Deaths\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"todayDeaths\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  {\" \"}\r\n                  Active\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"active\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  {\" \"}\r\n                  Tests\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"tests\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  Tests/1M\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"testsPerOneMillion\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{countries()}</tbody>\r\n          </Table>\r\n        </div>\r\n      </>\r\n    );\r\n    return table;\r\n  }\r\n\r\n  function show() {\r\n    return <div>{table()}</div>;\r\n  }\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinners\">\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"secondary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <Spinner animation=\"grow\" variant=\"warning\" />\r\n      </div>\r\n    );\r\n  else {\r\n    return <>{show()}</>;\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./charts.css\";\r\nimport Header from \"./header\";\r\nimport USAStates from \"./usastates\";\r\n\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport {\r\n  LineChart,\r\n  Bar,\r\n  BarChart,\r\n  Pie,\r\n  PieChart,\r\n  Area,\r\n  AreaChart,\r\n  ComposedChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nfunction Charts(props) {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [numDays, setNumdays] = useState(30);\r\n\r\n  const [graphType, setGraphType] = useState(\"Line\");\r\n  const [test, setTest] = useState([]);\r\n\r\n  var lastDate;\r\n  var search = decodeURI(window.location.pathname.split(\"/\").pop());\r\n\r\n  useEffect(() => {\r\n    var toFetch = `https://disease.sh/v2/historical/${search}?lastdays=${numDays}`;\r\n    if (window.location.pathname.includes(\"state\")) {\r\n      console.log(props.name);\r\n      toFetch = `https://disease.sh/v2/historical/usacounties/${search}`;\r\n    }\r\n    fetch(toFetch)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (window.location.pathname.includes(\"state\")) {\r\n          var here = data;\r\n          var temp = here.filter((each) => {\r\n              var a = (props.name)+\"\"\r\n              var b = (each.county)+\"\"\r\n \r\n            return (a.toUpperCase()===b.toUpperCase());\r\n          });\r\n          console.log(temp);\r\n          setTest(temp);\r\n        } else {\r\n          setTest(data);\r\n        }\r\n\r\n        setLoading(false);\r\n      });\r\n\r\n    // eslint-disable-next-line\r\n  }, [numDays]);\r\n\r\n  function testing(needed) {\r\n    var casesArray = [];\r\n\r\n    var first = \"true\";\r\n\r\n    var historyData = { ...test.timeline };\r\n    if (window.location.pathname.includes(\"state\")) {\r\n      historyData = test[0].timeline;\r\n    }\r\n\r\n    var dates = Object.keys(historyData.cases);\r\n    var cases = Object.values(historyData.cases);\r\n    var deaths = Object.values(historyData.deaths);\r\n    if (!window.location.pathname.includes(\"state\")) {\r\n      var recovered = Object.values(historyData.recovered);\r\n    }\r\n\r\n    for (var i = 0; i < dates.length; i++) {\r\n      if (casesArray.length < cases.length) {\r\n        casesArray.push({});\r\n      }\r\n    }\r\n\r\n    for (var i = 0; i < dates.length; i++) {\r\n      if (first) {\r\n        var n = dates[i].lastIndexOf(\"/\");\r\n        casesArray[i][\"date\"] = dates[i].substring(0, n);\r\n        lastDate = dates[i];\r\n      }\r\n\r\n      casesArray[i][\"confirmed\"] = cases[i];\r\n      casesArray[i][\"deaths\"] = deaths[i];\r\n      if (!window.location.pathname.includes(\"state\")) {\r\n        casesArray[i][\"recovered\"] = recovered[i];\r\n      }\r\n    }\r\n    first = false;\r\n\r\n    return casesArray;\r\n  }\r\n\r\n  function showFoot() {\r\n    let fixed = (\r\n      <div>\r\n        <div className=\"graphMessage\">Graph last updated on : {lastDate}</div>\r\n      </div>\r\n    );\r\n\r\n    return fixed;\r\n  }\r\n\r\n  function returnLines(str) {\r\n    var temp;\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return Line;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return Bar;\r\n      }\r\n\r\n      if (graphType === \"Area\") {\r\n        return Area;\r\n      }\r\n\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n\r\n    temp = (\r\n      <TestGraph\r\n        dataKey={str}\r\n        stroke={stringToColour(str)}\r\n        fill={stringToColour(str)}\r\n        dot={false}\r\n      />\r\n    );\r\n\r\n    return temp;\r\n  }\r\n\r\n  var stringToColour = function (str) {\r\n    if (str === \"confirmed\") {\r\n      return \"blue\";\r\n    }\r\n    if (str === \"deaths\") {\r\n      return \"red\";\r\n    }\r\n    if (str === \"recovered\") {\r\n      return \"green\";\r\n    }\r\n  };\r\n\r\n  function renderLineChart() {\r\n    var width;\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return LineChart;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return BarChart;\r\n      }\r\n      if (graphType === \"Area\") {\r\n        return AreaChart;\r\n      }\r\n      if (graphType === \"Pie\") {\r\n        return PieChart;\r\n      }\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return ComposedChart;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n\r\n    var current = testing(\"confirmed\");\r\n    var toShow;\r\n    if (window.location.pathname.includes(\"state\")) {\r\n      toShow = props.name;\r\n    }\r\n\r\n    return (\r\n      <div className=\"graphs\">\r\n        <br />\r\n        <ResponsiveContainer width={width} height={400}>\r\n          <TestGraph data={current}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n\r\n            {returnLines(\"confirmed\")}\r\n            {returnLines(\"deaths\")}\r\n            {returnLines(\"recovered\")}\r\n          </TestGraph>\r\n        </ResponsiveContainer>\r\n        <div className=\"graphMessage\">\r\n          <h4>{toShow}</h4>\r\n        </div>\r\n\r\n        {showFoot()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function changeDays(event) {\r\n    setNumdays(event.target.value);\r\n  }\r\n\r\n  function isFrom() {\r\n    if (!window.location.pathname.includes(\"state\")) {\r\n      return (\r\n        <>\r\n          <form onSubmit={(e) => e.preventDefault()}>\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"200\"\r\n              placeholder={\"30 days\"}\r\n              style={{ width: 72 }}\r\n              onChange={changeDays}\r\n            />{\" \"}\r\n            {displayGraphMenu()}\r\n          </form>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return displayGraphMenu();\r\n  }\r\n\r\n  function displayGraphMenu() {\r\n    function handleChange(e) {\r\n      setGraphType(e.target.value);\r\n    }\r\n\r\n    var dropdown0 = (\r\n      <>\r\n        <select onChange={handleChange}>\r\n          <option value={\"Line\"} checked>\r\n            {\" \"}\r\n            Graph type\r\n          </option>\r\n          <option value={\"Line\"}> Line</option>\r\n          <option value={\"Bar\"}> Bar</option>\r\n          <option value={\"Area\"}> Area</option>\r\n\r\n          {/* <option value={\"Composed\"}> Composed</option> */}\r\n        </select>\r\n        <br />\r\n      </>\r\n    );\r\n\r\n    return <>{dropdown0} </>;\r\n  }\r\n\r\n  return loading ? (\r\n    <div className=\"spinners\">\r\n      {\" \"}\r\n      <Spinner animation=\"grow\" variant=\"primary\" />\r\n      <Spinner animation=\"grow\" variant=\"secondary\" />\r\n      <Spinner animation=\"grow\" variant=\"success\" />\r\n      <Spinner animation=\"grow\" variant=\"danger\" />\r\n      <Spinner animation=\"grow\" variant=\"warning\" />\r\n      <Spinner animation=\"grow\" variant=\"info\" />\r\n    </div>\r\n  ) : search === \"USA\" ? (\r\n    <>\r\n      <Header type=\"USA\" />\r\n      <USAStates />\r\n      <div className=\"chartsNew\">\r\n        {isFrom()}\r\n        {renderLineChart()}\r\n      </div>\r\n    </>\r\n  ) : (\r\n    <div className=\"chartsNew\">\r\n      <Header type={search} />\r\n\r\n      {isFrom()}\r\n\r\n      {renderLineChart()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Charts;\r\n","import Modal from \"react-bootstrap/Modal\";\r\nimport React, { useState } from \"react\";\r\nimport MinChart from \"./minChart\";\r\n\r\nimport \"./pop.css\";\r\nimport './App.css'\r\nimport USACHARTS from './usastatescharts'\r\n\r\nfunction Popup(props) {\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <span style={{ cursor: \"pointer\" }} onClick={handleShow}>\r\n        {props.name}\r\n      </span>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={() => setShow(false)}\r\n        dialogClassName=\"modal-100w\"\r\n        size=\"xl\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            <span className=\"popUpHeader\"> {props.name} </span>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <MinChart  name ={props.name}/>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Popup;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./charts.css\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport \"./charts.css\";\r\nimport Select from \"react-select\";\r\n\r\nimport {\r\n  LineChart,\r\n  Bar,\r\n  BarChart,\r\n  Pie,\r\n  PieChart,\r\n  Area,\r\n  AreaChart,\r\n  ComposedChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nfunction Charts(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentGraph, setCurrentGraph] = useState();\r\n  const [currentType, setCurrenType] = useState(\"confirmed\");\r\n  const [showAll, setShowAll] = useState(false);\r\n  const [numDays, setNumdays] = useState(30);\r\n\r\n  const [toBeAdded, setToBeAdded] = useState([\"USA\"]);\r\n  const [countryList, setCountryList] = useState([\"USA\"]);\r\n\r\n  const [test, setTest] = useState([]);\r\n  const [graphType, setGraphType] = useState(\"Line\");\r\n\r\n  var lastDate;\r\n\r\n  useEffect(() => {\r\n    fetch(`https://corona.lmao.ninja/v2/historical?lastdays=${numDays}`, {\r\n      headers: { accept: \"Accept: application/json\" },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTest(data);\r\n        console.log(\"aaaaaaa\");\r\n        setLoading(false);\r\n        var search = props.name;\r\n        if (props.from === \"small\") {\r\n          setCurrentGraph(props.name);\r\n          setCountryList([props.name]);\r\n        }\r\n        setCurrentGraph(search);\r\n      });\r\n\r\n    // eslint-disable-next-line\r\n  }, [numDays]);\r\n\r\n  function testing(needed) {\r\n    var casesArray = [];\r\n    var deathsArray = [];\r\n    var recoveredArray = [];\r\n    var countries = countryList;\r\n    var first = \"true\";\r\n\r\n    test.forEach((element) => {\r\n      if (countries.includes(element.country)) {\r\n        var historyData = { ...element.timeline };\r\n\r\n        var dates = Object.keys(historyData.cases);\r\n        var cases = Object.values(historyData.cases);\r\n        var deaths = Object.values(historyData.deaths);\r\n        var recovered = Object.values(historyData.recovered);\r\n\r\n        for (var i = 0; i < dates.length; i++) {\r\n          if (casesArray.length < cases.length) {\r\n            casesArray.push({});\r\n            deathsArray.push({});\r\n            recoveredArray.push({});\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dates.length; i++) {\r\n          if (first) {\r\n            var n = dates[i].lastIndexOf(\"/\");\r\n            casesArray[i][\"date\"] = dates[i].substring(0, n);\r\n            deathsArray[i][\"date\"] = dates[i].substring(0, n);\r\n            recoveredArray[i][\"date\"] = dates[i].substring(0, n);\r\n\r\n            lastDate = dates[i];\r\n          }\r\n\r\n          casesArray[i][element.country] = cases[i];\r\n          deathsArray[i][element.country] = deaths[i];\r\n          recoveredArray[i][element.country] = recovered[i];\r\n        }\r\n        first = false;\r\n      }\r\n    });\r\n\r\n    if (currentType === \"confirmed\" && needed === \"confirmed\") {\r\n      return casesArray;\r\n    }\r\n\r\n    if (currentType === \"recovered\" || needed === \"recovered\") {\r\n      return recoveredArray;\r\n    }\r\n    if (currentType === \"deaths\" || needed === \"deaths\") {\r\n      return deathsArray;\r\n    }\r\n  }\r\n\r\n  function showFoot() {\r\n    let fixed = (\r\n      <span className=\"graphMessage\">Graph last updated on : {lastDate}</span>\r\n    );\r\n\r\n    return fixed;\r\n  }\r\n\r\n  function returnLines() {\r\n    var temp;\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return Line;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return Bar;\r\n      }\r\n\r\n      if (graphType === \"Area\") {\r\n        return Area;\r\n      }\r\n\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n    if (countryList.length === 1) {\r\n      temp = (\r\n        <TestGraph\r\n          dataKey={countryList[0]}\r\n          stroke={stringToColour(countryList[0])}\r\n          fill={stringToColour(countryList[0])}\r\n          dot={false}\r\n        />\r\n      );\r\n    }\r\n    if (countryList.length > 1) {\r\n      temp = countryList.map((each) => {\r\n        return (\r\n          <TestGraph\r\n            key={each}\r\n            dataKey={each}\r\n            stroke={stringToColour(each)}\r\n            fill={stringToColour(each)}\r\n            dot={false}\r\n          />\r\n        );\r\n      });\r\n    }\r\n\r\n    return temp;\r\n  }\r\n\r\n  var stringToColour = function (str) {\r\n    var hash = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    var colour = \"#\";\r\n    for (var j = 0; j < 3; j++) {\r\n      var value = (hash >> (j * 8)) & 0xff;\r\n      colour += (\"00\" + value.toString(16)).substr(-2);\r\n    }\r\n    return colour;\r\n  };\r\n\r\n  function renderLineChart() {\r\n    var width;\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return LineChart;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return BarChart;\r\n      }\r\n      if (graphType === \"Area\") {\r\n        return AreaChart;\r\n      }\r\n      if (graphType === \"Pie\") {\r\n        return PieChart;\r\n      }\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return ComposedChart;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n    if (props.from === \"small\") {\r\n      width = \"120%\";\r\n    }\r\n\r\n    if (!showAll) {\r\n      var current = testing(\"confirmed\");\r\n\r\n      var toShow = currentType.charAt(0).toUpperCase() + currentType.slice(1);\r\n\r\n      return (\r\n        <div className=\"graphs\">\r\n          <div>\r\n            {\" \"}\r\n            <h3>{toShow} </h3>\r\n            <ResponsiveContainer width={width} height={400}>\r\n              <TestGraph data={current}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n\r\n                {returnLines()}\r\n              </TestGraph>\r\n            </ResponsiveContainer>\r\n            {showFoot()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"graphs\">\r\n        <div>\r\n          {\" \"}\r\n          <h3>Confirmed </h3>\r\n          <ResponsiveContainer width=\"95%\" height={400}>\r\n            <TestGraph data={testing(\"confirmed\")} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              syncId=\"anyId\"\r\n              {returnLines()}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <h3>Recovered </h3>\r\n          <ResponsiveContainer width=\"95%\" height={400}>\r\n            <TestGraph data={testing(\"recovered\")} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n\r\n              {returnLines()}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <h3>Deaths </h3>\r\n          <ResponsiveContainer width=\"95%\" height={400}>\r\n            <TestGraph data={testing(\"deaths\")} syncId=\"anyId\">\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n\r\n              {returnLines()}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n        </div>\r\n\r\n        {showFoot()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function changeDays(event) {\r\n    setNumdays(event.target.value);\r\n  }\r\n\r\n  function handleTypes() {\r\n    return (\r\n      <>\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n          }}\r\n        >\r\n          <select onChange={handleType}>\r\n            <option value=\"confirmed\"> Confirmed</option>\r\n            <option value=\"recovered\"> Recovered</option>\r\n            <option value=\"deaths\"> Deaths</option>\r\n            <option value=\"all\"> All</option>\r\n          </select>{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            min=\"0\"\r\n            max=\"200\"\r\n            placeholder={numDays + \" days\"}\r\n            style={{ width: 90 }}\r\n            onChange={changeDays}\r\n          />{\" \"}\r\n          {dropdown0}\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function returnCountryList() {\r\n    var full = Object.values(test);\r\n    let again = new Set();\r\n    full.map((ele, i) => {\r\n      return again.add(ele.country);\r\n    });\r\n    return Array.from(again);\r\n  }\r\n\r\n  function handleList(opt) {\r\n    console.log(opt);\r\n    setCountryList([]);\r\n    var a = [];\r\n    opt.map((each) => {\r\n      a.push(each.value);\r\n    });\r\n    console.log(a);\r\n    setCountryList(a);\r\n  }\r\n\r\n  function handleType(e) {\r\n    if (e.target.value === \"all\") {\r\n      setShowAll(true);\r\n    } else {\r\n      setShowAll(false);\r\n      setCurrenType(e.target.value);\r\n    }\r\n  }\r\n\r\n  function isFrom() {\r\n    return (\r\n      <>\r\n        <br />\r\n        Select countries to add to the graph:\r\n        <form onSubmit={(e) => e.preventDefault}>\r\n          <Select\r\n            isMulti\r\n            onChange={(opt) => {\r\n              handleList(opt);\r\n            }}\r\n            onInputChange={() => {\r\n              console.log(\"tara\");\r\n            }}\r\n            options={returnCountryList().map((value, i) => ({\r\n              label: value,\r\n              key: i,\r\n              value: value,\r\n            }))}\r\n          />\r\n        </form>\r\n        {handleTypes()}\r\n      </>\r\n    );\r\n  }\r\n\r\n  function handleChange(e) {\r\n    setGraphType(e.target.value);\r\n  }\r\n\r\n  var dropdown0 = (\r\n    <>\r\n      <select onChange={handleChange}>\r\n        <option defaultChecked disabled>\r\n          {\" \"}\r\n          Graph type\r\n        </option>\r\n        <option value={\"Line\"}> Line graph</option>\r\n        <option value={\"Bar\"}> Bar graph</option>\r\n        <option value={\"Area\"}> Area graph</option>\r\n\r\n        {/* <option value={\"Composed\"}> Composed</option> */}\r\n      </select>\r\n    </>\r\n  );\r\n\r\n  return loading ? (\r\n    <div className=\"spinners\">\r\n      {\" \"}\r\n      <Spinner animation=\"grow\" variant=\"primary\" />\r\n      <Spinner animation=\"grow\" variant=\"secondary\" />\r\n      <Spinner animation=\"grow\" variant=\"success\" />\r\n      <Spinner animation=\"grow\" variant=\"danger\" />\r\n      <Spinner animation=\"grow\" variant=\"warning\" />\r\n      <Spinner animation=\"grow\" variant=\"info\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"chartsNew\">\r\n      {isFrom()}\r\n\r\n      {renderLineChart()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Charts;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport sort from \"./sort.png\";\r\nimport Popup from \"./popup\";\r\nimport Header from \"./header\";\r\n//import json from './usaAll.json'\r\n\r\nfunction Main() {\r\n  let [latest, setLatest] = useState([]);\r\n  let [results, setResults] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  var [search, setSearch] = useState(\"\");\r\n  const [type, setType] = useState(\"desc\");\r\n  var search = decodeURI(window.location.pathname.split(\"/\").pop() + \"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v2/jhucsse/counties\", {\r\n      headers: { accept: \"Accept: application/json\" },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"aa\");\r\n        setLoading(false);\r\n\r\n        const tolook = data.filter((each) => {\r\n\r\n          return each.province === search;\r\n        });\r\n\r\n        setResults(tolook);\r\n        setLatest(tolook);\r\n\r\n        \r\n      });\r\n  }, []);\r\n\r\n  function handleSearch(event) {\r\n    setSearch(event.target.value);\r\n\r\n    const filtered = latest.filter((each) => {\r\n      return each.county\r\n        .toUpperCase()\r\n        .startsWith(event.target.value.toUpperCase());\r\n    });\r\n\r\n    setResults(filtered);\r\n  }\r\n\r\n  function image() {\r\n    const image = (\r\n      <img\r\n        src={sort}\r\n        style={{ cursor: \"pointer\" }}\r\n        alt=\"Logo\"\r\n        className=\"image\"\r\n      />\r\n    );\r\n    return image;\r\n  }\r\n\r\n  function submitHandler(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  function handleChange(col) {\r\n\r\n    function compare(a, b) {\r\n      var bandA;\r\n      var bandB;\r\n      if (col !== \"county\") {\r\n        bandA = a[\"stats\"][col];\r\n        bandB = b[\"stats\"][col];\r\n      } else {\r\n        bandA = a[col];\r\n        bandB = b[col];\r\n      }\r\n\r\n\r\n\r\n      if (type !== \"asc\") {\r\n        let comparison = 0;\r\n        if (bandA > bandB) {\r\n          comparison = 1;\r\n        } else if (bandA < bandB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n      if (type === \"asc\") {\r\n        let comparison = 0;\r\n        if (bandA < bandB) {\r\n          comparison = 1;\r\n        } else if (bandA > bandB) {\r\n          comparison = -1;\r\n        }\r\n        return comparison;\r\n      }\r\n    }\r\n\r\n    const sortedBaz = results.slice().sort(compare);\r\n\r\n    setResults(sortedBaz);\r\n\r\n    type === \"asc\" ? setType(\"desc\") : setType(\"asc\");\r\n  }\r\n\r\n  function countries() {\r\n\r\n    if (results.length === 0) {\r\n        return <tr>\r\n            <td  colSpan=\"4\">No Data Available</td>\r\n        </tr>\r\n      }\r\n    const counties = results.map((data, i) => {\r\n      return (\r\n        <tr key={i}>\r\n          <td className=\"county\">\r\n            <span style={{ height: `100%` }}>\r\n              {\" \"}\r\n              <Popup name={data.county} type=\"state\" from={\"small\"} />\r\n            </span>\r\n          </td>\r\n          <td>\r\n            {\" \"}\r\n            <NumberFormat\r\n              value={data.stats.confirmed}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n\r\n          <td className=\"datas\">\r\n            <NumberFormat\r\n              value={data.stats.deaths}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n          <td className=\"datas\">\r\n            <NumberFormat\r\n              value={data.stats.recovered}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n            />\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n    return counties;\r\n  }\r\n\r\n  function table() {\r\n    const table = (\r\n      <>\r\n      <br/>\r\n        <form onSubmit={submitHandler} style={{ textAlign: \"center\" }}>\r\n          <label>\r\n            Search:\r\n            <input onChange={handleSearch} type=\"text\" name=\"searching\" />\r\n          </label>\r\n        </form>\r\n        <div style={{ overflow: \"scrollable\" }}>\r\n          <Table\r\n            className=\"table\"\r\n            striped\r\n            bordered\r\n            hover\r\n            variant=\"dark\"\r\n            style={{ maxWidth: 900 }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>\r\n                  County\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"county\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  Total cases\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"confirmed\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n\r\n                <th>\r\n                  Deaths\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"confirmed\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n                <th>\r\n                  Recovered\r\n                  <span\r\n                    onClick={() => {\r\n                      handleChange(\"recovered\");\r\n                    }}\r\n                  >\r\n                    {image()}\r\n                  </span>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{countries()}</tbody>\r\n          </Table>\r\n        </div>\r\n      </>\r\n    );\r\n    return table;\r\n  }\r\n\r\n  function show() {\r\n    return <div>{table()}</div>;\r\n  }\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinners\">\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"secondary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <Spinner animation=\"grow\" variant=\"warning\" />\r\n      </div>\r\n    );\r\n  else {\r\n    return (\r\n      <>\r\n        <Header />\r\n        {show()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport \"./map.css\";\r\nimport Popup from \"./popup\";\r\nfunction Map(props) {\r\n  const [data, setData] = useState(props.data);\r\n  const [loading, setLoading] = useState(true);\r\n  const key = \"AIzaSyDU_NJQ-CJfd_KHcSxi9SuTAk3lO_B7jYg\";\r\n  var [lati, setLeti] = useState();\r\n  var [lngi, setLngi] = useState();\r\n  var [type, setType] = useState(\"cases\");\r\n\r\n  useEffect(() => {\r\n    function success(pos) {\r\n      var crd = pos.coords;\r\n\r\n      console.log(`Longitude: ${crd.longitude}`);\r\n\r\n      setLeti(crd.latitude);\r\n      setLngi(crd.longitude);\r\n\r\n      setLoading(false);\r\n    }\r\n\r\n    function error(err) {\r\n      console.warn(`ERROR(${err.code}): ${err.message}`);\r\n\r\n      setLeti(37);\r\n      setLngi(95);\r\n\r\n      setLoading(false);\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(success, error);\r\n\r\n    console.log(lati);\r\n  });\r\n\r\n  var center = { lat: lati, lng: lngi };\r\n  var countyMap = data.map((each) => {\r\n    return (\r\n      <div\r\n        className=\"marker\"\r\n        key={each.country}\r\n        lat={each.countryInfo.lat}\r\n        lng={each.countryInfo.long}\r\n      >\r\n         <Popup name={each.country} from={\"small\"} type = \"map\" />\r\n        <img className=\"flag\" src={each.countryInfo.flag} alt=\"country image\" />\r\n        <br />\r\n        {each[type]}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  var form = (\r\n    <>\r\n      {\" \"}\r\n      <input\r\n        type=\"radio\"\r\n        value=\"cases\"\r\n        onChange={handleChange}\r\n        checked={type == \"cases\"}\r\n      />{\" \"}\r\n      Cases <span> </span>\r\n      <input type=\"radio\" name=\"type\" value=\"deaths\" onChange={handleChange} />\r\n      Deaths<span> </span>\r\n      <input\r\n        type=\"radio\"\r\n        name=\"type\"\r\n        value=\"recovered\"\r\n        onChange={handleChange}\r\n      />\r\n      Recovered\r\n    </>\r\n  );\r\n\r\n  function handleChange(e) {\r\n    setType(e.target.value);\r\n  }\r\n  if (!loading) {\r\n    return (\r\n      <>\r\n        <div>\r\n          {form}\r\n          <div style={{ height: \"100vh\", width: \"100%\" }}>\r\n            <GoogleMapReact\r\n              bootstrapURLKeys={{ key: key }}\r\n              defaultCenter={center}\r\n              defaultZoom={4}\r\n            >\r\n              {countyMap}\r\n            </GoogleMapReact>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  return \"Loading...\";\r\n}\r\n\r\nexport default Map;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Table from \"react-bootstrap/Table\";\nimport sort from \"./sort.png\";\nimport NumberFormat from \"react-number-format\";\nimport Popup from \"./popup\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport MinCharts from \"./minChart\";\nimport Charts from \"./Charts\";\nimport \"react-tabs/style/react-tabs.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Counties from \"./counties\";\nimport Map from \"./map\";\nimport Header from \"./header\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App(props) {\n  const [results, setResults] = useState([]);\n  const [finalResults, setFinalResults] = useState([]);\n  const [type, setType] = useState(\"desc\");\n  var [search, setSearch] = useState(\"\");\n  const [isLoading, setIsloading] = useState(true);\n  const [pathTo, setPathTo] = useState();\n\n  const [url] = useState(props.name);\n\n  \n\n  useEffect(() => {\n    fetch(\"\" + url + \"?sort=cases\", {\n      headers: { accept: \"Accept: application/json\" },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setResults(data);\n        setFinalResults(data);\n        console.log(\"aaaaaaa\");\n        setIsloading(false);\n      });\n  }, [url]);\n\n  function countries() {\n    const countries = results.map((data, i) => {\n      let isNewDeath = \"\";\n      let deathSign = \"\";\n      if (data.todayDeaths !== 0) {\n        isNewDeath = \"danger\";\n        deathSign = \"+\";\n      }\n      let isNewCases = \"\";\n      let casesSign = \"\";\n      if (data.todayCases !== 0) {\n        casesSign = \"+\";\n        isNewCases = \"casesNew\";\n      }\n\n      return (\n        <tr key={i}>\n          <td className=\"country\">\n            <span style={{ height: `100%` }}>\n              <img src={data.countryInfo.flag} alt=\"flag\" width=\"20px\" />{\" \"}\n              <Link className = \"link\"\n                to={`country/${data.country}`}\n                onClick={() => {\n                  setPathTo(data.country);\n                }}\n              >\n                {data.country}\n              </Link>\n            </span>\n          </td>\n\n          <td>\n            {\" \"}\n            <NumberFormat\n              value={data.cases}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.deaths}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.recovered}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className={isNewCases}>\n            {casesSign}\n\n            <NumberFormat\n              value={data.todayCases}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className={isNewDeath}>\n            {\" \"}\n            {deathSign}\n            <NumberFormat\n              value={data.todayDeaths}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.active}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.critical}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.casesPerOneMillion}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.deathsPerOneMillion}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n\n          <td className=\"datas\">\n            {\" \"}\n            <NumberFormat\n              value={data.testsPerOneMillion}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          </td>\n        </tr>\n      );\n    });\n    return countries;\n  }\n\n  function handleChange(col) {\n    \n    function compare(a, b) {\n      \n      const bandA = a[col];\n      const bandB = b[col];\n      console.log(bandA)\n      if (type !== \"asc\") {\n        let comparison = 0;\n        if (bandA > bandB) {\n          comparison = 1;\n        } else if (bandA < bandB) {\n          comparison = -1;\n        }\n        return comparison;\n      }\n      if (type === \"asc\") {\n        let comparison = 0;\n        if (bandA < bandB) {\n          comparison = 1;\n        } else if (bandA > bandB) {\n          comparison = -1;\n        }\n        return comparison;\n      }\n    }\n\n    const sortedBaz = results.slice().sort(compare);\n\n    setResults(sortedBaz);\n\n    type === \"asc\" ? setType(\"desc\") : setType(\"asc\");\n  }\n\n  function handleSearch(event) {\n    setSearch(event.target.value);\n\n    const filtered = finalResults.filter((each) =>\n      each.country.toUpperCase().startsWith(event.target.value.toUpperCase())\n    );\n    setResults(filtered);\n  }\n\n  function submitHandler(e) {\n    e.preventDefault();\n  }\n\n  function image() {\n    const image = (\n      <img\n        src={sort}\n        style={{ cursor: \"pointer\" }}\n        alt=\"Logo\"\n        className=\"image\"\n      />\n    );\n    return image;\n  }\n\n  function table() {\n    const table = (\n      <>\n      <Header type = \"main\"/>\n        <form onSubmit={submitHandler} style={{ textAlign: \"center\" }}>\n          <label>\n            Search:\n            <input\n              onChange={handleSearch}\n              type=\"text\"\n              name=\"searching\"\n              value={search}\n            />\n          </label>\n        </form>\n        <div style={{ overflow: \"scrollable\" }}>\n          <Table\n            className=\"table\"\n            striped\n            bordered\n            hover\n            variant=\"dark\"\n            style={{ maxWidth: 900 }}\n          >\n            <thead>\n              <tr>\n                <th>\n                  Country\n                  <span\n                    onClick={() => {\n                      handleChange(\"country\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  Total cases\n                  <span\n                    onClick={() => {\n                      handleChange(\"cases\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  Deaths\n                  <span\n                    onClick={() => {\n                      handleChange(\"deaths\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  Recovered\n                  <span\n                    onClick={() => {\n                      handleChange(\"recovered\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  {\" \"}\n                  New cases\n                  <span\n                    onClick={() => {\n                      handleChange(\"todayCases\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  {\" \"}\n                  New deaths\n                  <span\n                    onClick={() => {\n                      handleChange(\"todayDeaths\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  {\" \"}\n                  Active cases\n                  <span\n                    onClick={() => {\n                      handleChange(\"active\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  Critical\n                  <span\n                    onClick={() => {\n                      handleChange(\"critical\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  Cases/1M\n                  <span\n                    onClick={() => {\n                      handleChange(\"casesPerOneMillion\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  Deaths/1M\n                  <span\n                    onClick={() => {\n                      handleChange(\"deathsPerOneMillion\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n                <th>\n                  Tests/1M\n                  <span\n                    onClick={() => {\n                      handleChange(\"testsPerOneMillion\");\n                    }}\n                  >\n                    {image()}\n                  </span>\n                </th>\n              </tr>\n            </thead>\n            <tbody>{countries()}</tbody>\n          </Table>\n        </div>\n      </>\n    );\n    return table;\n  }\n\n  function tabs() {\n    const tabs = (\n     \n      \n        <>\n            <Button variant=\"primary\"><Link  className = \"links\" to = \"/\">All countries </Link> </Button>{' '}\n     \n    \n            <Button variant=\"success\"><Link className = \"links\" to = \"/worldMap\">World Map </Link></Button>{' '}\n          \n           \n            <Button variant=\"info\"><Link className = \"links\"  to = \"/graphs\">Graphs </Link></Button>{' '}\n         \n</>\n     \n     \n    );\n    return tabs;\n  }\n\n  return isLoading ? (\n    <div className=\"spinners\">\n      {\" \"}\n      <Spinner animation=\"grow\" variant=\"primary\" />\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n      <Spinner animation=\"grow\" variant=\"success\" />\n      <Spinner animation=\"grow\" variant=\"danger\" />\n      <Spinner animation=\"grow\" variant=\"warning\" />\n    </div>\n  ) : (\n    // <div className=\"whole\">{tabs()}</div>\n\n    <div className=\"whole\">\n      {console.log(pathTo)}\n      <Router>\n        <div>\n          {tabs()}\n          <Switch>\n            <Route path=\"/\" exact>  {table()}</Route>\n            <Route path=\"/worldMap\" exact>  <Map data={results} /></Route>\n            <Route path=\"/graphs\" exact>  <Charts/></Route>\n            <Route path=\"/country/:name\" ><MinCharts name = {pathTo} from = \"small\"/> </Route>\n            <Route path=\"/USA/:name\" ><Counties/> </Route>\n\n          </Switch>\n        </div>\n      </Router>\n    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport App from './App';\r\n\r\n\r\n\r\nfunction main(props) {\r\n    return (\r\n        <div>\r\n            <App name=\"https://corona.lmao.ninja/v2/countries\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default main\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './main';\n\n\n\nReactDOM.render(\n \n    <Main />,\n  \n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/sort.6a59f831.png\";"],"sourceRoot":""}