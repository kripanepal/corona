{"version":3,"sources":["sort.png","Charts.js","usastates.js","popup.js","App.js","header.js","main.js","index.js"],"names":["module","exports","Charts","props","lastDate","useState","data","setData","loading","setLoading","currentGraph","setCurrentGraph","currentType","setCurrenType","showAll","setShowAll","showFoot","fixed","className","from","handleList","e","target","value","handleType","show3","useEffect","fetch","then","response","json","search","name","temporary","Spinner","animation","variant","onSubmit","preventDefault","onChange","disabled","Object","keys","map","i","key","type","onClick","isFrom","handleTypes","width","current","finalData","forEach","element","date","substring","config","height","dataKey","stroke","strokeDasharray","renderLineChart","Main","setLatest","show","a","res","Popup","setShow","handleShow","style","cursor","Modal","onHide","dialogClassName","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","App","latest","results","setResults","finalResults","setFinalResults","setType","setSearch","isLoading","setIsloading","url","Date","parseInt","updated","toString","countries","isNewDeath","deathSign","todayDeaths","isNewCases","casesSign","todayCases","src","countryInfo","flag","alt","country","cases","displayType","thousandSeparator","deaths","recovered","active","critical","casesPerOneMillion","deathsPerOneMillion","handleChange","col","reverse","image","sort","table","textAlign","event","filtered","filter","each","toUpperCase","startsWith","overflow","Table","striped","bordered","hover","maxWidth","tabs","Button","console","log","lastUpdated","CardDeck","Card","bg","text","marginLeft","Text","Footer","main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23dd5c1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sort.6a59f831.png\";","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./charts.css\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nfunction Charts(props) {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentGraph, setCurrentGraph] = useState(\"USA\");\r\n  const [currentType, setCurrenType] = useState(\"confirmed\");\r\n  const [showAll, setShowAll] = useState(false);\r\n  var lastDate;\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://pomber.github.io/covid19/timeseries.json\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setData(data);\r\n        setLoading(false);\r\n        var search = props.name;\r\n        if (props.name === \"UK\") {\r\n          search = \"United Kingdom\";\r\n        }\r\n\r\n        if (props.name === \"USA\") {\r\n          search = \"US\";\r\n        }\r\n\r\n        if (props.name === \"UAE\") {\r\n          search = \"United Arab Emirates\";\r\n        }\r\n\r\n        if (props.name === \"S.Korea\") {\r\n          search = \"South Korea\";\r\n        }\r\n        setCurrentGraph(search);\r\n      });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  function config() {\r\n    let search = currentGraph;\r\n\r\n    let finalData;\r\n\r\n    if (data[search]) {\r\n      finalData = data[search];\r\n      if (!loading) {\r\n        finalData.forEach((element) => {\r\n          lastDate = element.date;\r\n          element.date = (element.date + \"\").substring(5);\r\n        });\r\n\r\n        return finalData;\r\n      }\r\n    }\r\n  }\r\n\r\n  function showFoot() {\r\n    let fixed = (\r\n      <span className=\"graphMessage\">Graph last updated on : {lastDate}</span>\r\n    );\r\n\r\n    if (props.from !== \"small\") {\r\n      fixed = (\r\n        <div>\r\n          {\" \"}\r\n          {fixed} <span className=\"graphCountry\">{currentGraph} </span>{\" \"}\r\n        </div>\r\n      );\r\n    }\r\n    return fixed;\r\n  }\r\n\r\n  function renderLineChart() {\r\n    var width;\r\n\r\n    if (props.from === \"small\") {\r\n      width = \"120%\";\r\n    }\r\n\r\n    var current = config();\r\n\r\n    if (!showAll) {\r\n      return (\r\n        <div className=\"graphs\">\r\n          <ResponsiveContainer width={width} height={400}>\r\n            <LineChart data={current}>\r\n              <CartesianGrid />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Line dataKey={currentType} stroke=\"#8884d8\" />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n          {showFoot()}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"graphs\">\r\n        <ResponsiveContainer width=\"95%\" height={400}>\r\n          <LineChart data={current}>\r\n            <CartesianGrid />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line dataKey=\"confirmed\" stroke=\"#8884d8\" />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n\r\n        <ResponsiveContainer width=\"95%\" height={400}>\r\n          <LineChart data={current}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n\r\n            <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"red\" />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n\r\n        <ResponsiveContainer width=\"95%\" height={400}>\r\n          <LineChart data={current}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n\r\n            <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"green\" />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n\r\n        {showFoot()}\r\n      </div>\r\n    );\r\n  }\r\n  function handleList(e) {\r\n    setCurrentGraph(e.target.value);\r\n  }\r\n\r\n  function handleType(e) {\r\n    setCurrenType(e.target.value);\r\n  }\r\n\r\n  function show3() {\r\n    showAll ? setShowAll(false) : setShowAll(true);\r\n  }\r\n\r\n  function handleTypes() {\r\n    if (!showAll) {\r\n      return (\r\n        <form>\r\n          <label> Select Graph type </label>\r\n          <select name=\"type\" value={currentType} onChange={handleType}>\r\n            <option value=\"confirmed\">Confirmed</option>\r\n            <option value=\"deaths\"> Deaths</option>\r\n            <option value=\"recovered\"> Recovered</option>\r\n          </select>\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n\r\n  function isFrom() {\r\n    if (props.from !== \"small\") {\r\n      return (\r\n        <form onSubmit={(e) => e.preventDefault}>\r\n          <label>Country:</label>\r\n          <select name=\"country\" value={currentGraph} onChange={handleList}>\r\n            <option disabled>Select Country</option>\r\n            {Object.keys(data).map((value, i) => (\r\n              <option value={value} key={i}>\r\n                {value}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <button type=\"button\" onClick={show3}>\r\n            {temporary}\r\n          </button>\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n\r\n  var temporary = showAll ? \"Show confirmed\" : \"Show All\";\r\n\r\n  return loading ? (\r\n    <div className=\"spinners\">\r\n      {\" \"}\r\n      <Spinner animation=\"grow\" variant=\"primary\" />\r\n      <Spinner animation=\"grow\" variant=\"secondary\" />\r\n      <Spinner animation=\"grow\" variant=\"success\" />\r\n      <Spinner animation=\"grow\" variant=\"danger\" />\r\n      <Spinner animation=\"grow\" variant=\"warning\" />\r\n      <Spinner animation=\"grow\" variant=\"info\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"chartsNew\">\r\n      {isFrom()}\r\n      {handleTypes()}\r\n\r\n      {renderLineChart()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Charts;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nfunction Main() {\r\n  let [latest, setLatest] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  useEffect(async () => {\r\n    fetch(\"https://corona.lmao.ninja/v2/states?sort=cases\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setLatest(data);\r\n\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n\r\n  function createTable()\r\n  {}\r\n\r\n  function show() {\r\n      return(\r\n   <div>\r\n      </div>)\r\n  \r\n\r\n    \r\n  }\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinners\">\r\n        {\" \"}\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"secondary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <Spinner animation=\"grow\" variant=\"warning\" />\r\n      </div>\r\n    );\r\n    else{\r\n      return <div> {show}</div>;\r\n    }\r\n  \r\n}\r\n\r\nexport default Main;\r\n","import Modal from \"react-bootstrap/Modal\";\r\nimport React, { useState } from \"react\";\r\nimport Charts from \"./Charts\";\r\nimport USA from \"./usastates\";\r\nimport './pop.css'\r\n\r\nfunction Popup(props) {\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  if(props.name === 'USA')\r\n  { return(\r\n    <>\r\n    <span style = {{cursor: \"pointer\"}}onClick={handleShow}>{props.name}</span>\r\n\r\n    <Modal\r\n \r\n      show={show}\r\n      onHide={() => setShow(false)}\r\n      dialogClassName=\"modal-100w\"\r\n      size=\"xl\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n         <span className = \"popUpHeader\">  {props.name} </span>\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n         <div> <USA/></div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  </>)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span style = {{cursor: \"pointer\"}}onClick={handleShow}>{props.name}</span>\r\n\r\n      <Modal\r\n   \r\n        show={show}\r\n        onHide={() => setShow(false)}\r\n        dialogClassName=\"modal-100w\"\r\n        size=\"xl\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n           <span className = \"popUpHeader\">  {props.name} </span>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Charts name = {props.name} from = {props.from} className = \"popCharts\"/>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Popup;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Table from \"react-bootstrap/Table\";\nimport sort from \"./sort.png\";\nimport NumberFormat from \"react-number-format\";\nimport Popup from \"./popup\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport Charts from \"./Charts\";\nimport \"react-tabs/style/react-tabs.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nfunction App(props) {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [finalResults, setFinalResults] = useState([]);\n  const [type, setType] = useState(\"desc\");\n  var [search, setSearch] = useState(\"\");\n  const [isLoading, setIsloading] = useState(true);\n\n  const [url, setUrl] = useState(props.name);\n\n\n  useEffect(() => {\n    fetch(url + \"?sort=cases\")\n      .then((res) => res.json())\n      .then((data) => {\n        setResults(data);\n        setFinalResults(data);\n\n        setIsloading(false);\n      });\n  }, []);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const countries = results.map((data, i) => {\n    let isNewDeath = \"\";\n    let deathSign = \"\";\n    if (data.todayDeaths !== 0) {\n      isNewDeath = \"danger\";\n      deathSign = \"+\";\n    }\n    let isNewCases = \"\";\n    let casesSign = \"\";\n    if (data.todayCases !== 0) {\n      casesSign = \"+\";\n      isNewCases = \"casesNew\";\n    }\n\n    return (\n      <tr key={i}>\n        <td className=\"country\">\n          <span style={{ height: `100%` }}>\n            <img src={data.countryInfo.flag} alt=\"flag\" width=\"20px\" />{\" \"}\n            <Popup name={data.country} from={\"small\"} />\n          </span>\n        </td>\n        <td>\n          {\" \"}\n          <NumberFormat\n            value={data.cases}\n            displayType={\"text\"}\n            thousandSeparator={true}\n          />\n        </td>\n        <td className=\"datas\">\n          {\" \"}\n          <NumberFormat\n            value={data.deaths}\n            displayType={\"text\"}\n            thousandSeparator={true}\n          />\n        </td>\n        <td className=\"datas\">\n          {\" \"}\n          <NumberFormat\n            value={data.recovered}\n            displayType={\"text\"}\n            thousandSeparator={true}\n          />\n        </td>\n        <td className={isNewCases}>\n          {casesSign}\n\n          <NumberFormat\n            value={data.todayCases}\n            displayType={\"text\"}\n            thousandSeparator={true}\n          />\n        </td>\n        <td className={isNewDeath}>\n          {\" \"}\n          {deathSign}\n          <NumberFormat\n            value={data.todayDeaths}\n            displayType={\"text\"}\n            thousandSeparator={true}\n          />\n        </td>\n        <td className=\"datas\">\n          {\" \"}\n          <NumberFormat\n            value={data.active}\n            displayType={\"text\"}\n            thousandSeparator={true}\n          />\n        </td>\n        <td className=\"datas\">\n          {\" \"}\n          <NumberFormat\n            value={data.critical}\n            displayType={\"text\"}\n            thousandSeparator={true}\n          />\n        </td>\n\n        <td className=\"datas\">\n          {\" \"}\n          <NumberFormat\n            value={data.casesPerOneMillion}\n            displayType={\"text\"}\n            thousandSeparator={true}\n          />\n        </td>\n        <td className=\"datas\">\n          {\" \"}\n          <NumberFormat\n            value={data.deathsPerOneMillion}\n            displayType={\"text\"}\n            thousandSeparator={true}\n          />\n        </td>\n      </tr>\n    );\n  });\n\n  async function handleChange(col) {\n    let response = await fetch(url + \"?sort=\" + col);\n    const json = await response.json();\n    if (type === \"asc\") {\n      setType(\"desc\");\n      await setResults(json);\n    } else {\n      setType(\"asc\");\n      await setResults(json.reverse());\n    }\n\n    // function compare(a, b) {\n    //   const bandA = a[col];\n    //   const bandB = b[col];\n\n    //   if (type !== \"asc\") {\n    //     let comparison = 0;\n    //     if (bandA > bandB) {\n    //       comparison = 1;\n    //     } else if (bandA < bandB) {\n    //       comparison = -1;\n    //     }\n    //     return comparison;\n    //   }\n    //   if (type === \"asc\") {\n    //     let comparison = 0;\n    //     if (bandA < bandB) {\n    //       comparison = 1;\n    //     } else if (bandA > bandB) {\n    //       comparison = -1;\n    //     }\n    //     return comparison;\n    //   }\n    // }\n\n    // const sortedBaz = results.slice().sort(compare);\n\n    // setResults(sortedBaz);\n  }\n\n  function handleSearch(event) {\n    setSearch(event.target.value);\n  \n    const filtered = finalResults.filter((each) =>\n      each.country.toUpperCase().startsWith(event.target.value.toUpperCase())\n    );\n    setResults(filtered);\n  }\n\n  function submitHandler(e) {\n    e.preventDefault();\n  }\n\n  const image = (\n    <img\n      src={sort}\n      style={{ cursor: \"pointer\" }}\n      alt=\"Logo\"\n      className=\"image\"\n    />\n  );\n  const table = (\n    <>\n      <form onSubmit={submitHandler} style={{ textAlign: \"center\" }}>\n        <label>\n          Search:\n          <input\n            onChange={handleSearch}\n            type=\"text\"\n            name=\"searching\"\n            value={search}\n          />\n        </label>\n      </form>\n      <div style={{ overflow: \"scrollable\" }}>\n        <Table\n          className=\"table\"\n          striped\n          bordered\n          hover\n          variant=\"dark\"\n          style={{ maxWidth: 900 }}\n        >\n          <thead>\n            <tr>\n              <th>\n                Country\n                <span\n                  onClick={() => {\n                    handleChange(\"country\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n              <th>\n                Total cases\n                <span\n                  onClick={() => {\n                    handleChange(\"cases\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n              <th>\n                Deaths\n                <span\n                  onClick={() => {\n                    handleChange(\"deaths\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n              <th>\n                Recovered\n                <span\n                  onClick={() => {\n                    handleChange(\"recovered\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n              <th>\n                {\" \"}\n                New cases\n                <span\n                  onClick={() => {\n                    handleChange(\"todayCases\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n              <th>\n                {\" \"}\n                New deaths\n                <span\n                  onClick={() => {\n                    handleChange(\"todayDeaths\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n              <th>\n                {\" \"}\n                Active cases\n                <span\n                  onClick={() => {\n                    handleChange(\"active\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n              <th>\n                Critical\n                <span\n                  onClick={() => {\n                    handleChange(\"critical\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n              <th>\n                Cases/1M\n                <span\n                  onClick={() => {\n                    handleChange(\"casesPerOneMillion\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n              <th>\n                Deaths/1M\n                <span\n                  onClick={() => {\n                    handleChange(\"critical\");\n                  }}\n                >\n                  {image}\n                </span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>{countries}</tbody>\n        </Table>\n      </div>\n    </>\n  );\n\n  const tabs = (\n    <Tabs className=\"tabs\">\n      <TabList>\n        <Tab>\n          {\" \"}\n          <Button variant=\"primary\"> All countries </Button>\n        </Tab>\n        <Tab>\n          {\" \"}\n          <Button variant=\"info\">Graphs</Button>\n        </Tab>\n      </TabList>\n\n      <TabPanel>{table}</TabPanel>\n      <TabPanel>\n        <Charts name=\"US\" />\n      </TabPanel>\n    </Tabs>\n  );\n  return isLoading ? (\n    <div className=\"spinners\">\n      {\" \"}\n      <Spinner animation=\"grow\" variant=\"primary\" />\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n      <Spinner animation=\"grow\" variant=\"success\" />\n      <Spinner animation=\"grow\" variant=\"danger\" />\n      <Spinner animation=\"grow\" variant=\"warning\" />\n    </div>\n  ) : (\n    <div className=\"whole\">{tabs}</div>\n  );\n}\n\nexport default App;\n","import React, { useEffect, useState } from \"react\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nfunction Main() {\r\n  let [latest, setLatest] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  useEffect(async () => {\r\n     fetch(\"https://corona.lmao.ninja/v2/all\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        setLatest(data)\r\n        console.log(latest);\r\n        setLoading(false);\r\n        \r\n      });\r\n  }, []);\r\n\r\n\r\nfunction show()\r\n{\r\n  \r\n    const date = new Date(parseInt(latest.updated));\r\n    const lastUpdated = date.toString();\r\n    console.log(latest);\r\n    const header = (\r\n      <div className=\"deckss\">\r\n        <span className=\"worldWide\">World Wide</span>\r\n        <CardDeck className=\"deck\">\r\n          <Card\r\n            bg={\"secondary\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{ marginLeft: 3 }}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Cases</Card.Title>\r\n              <Card.Text>\r\n                <NumberFormat\r\n                  value={latest.cases}\r\n                  displayType={\"text\"}\r\n                  thousandSeparator={true}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card bg={\"danger\"} text={\"white\"} className=\"text-center\" style={{}}>\r\n            <Card.Body>\r\n              <Card.Title>Deaths</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <NumberFormat\r\n                  value={latest.deaths}\r\n                  displayType={\"text\"}\r\n                  thousandSeparator={true}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card\r\n            bg={\"success\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{}}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Recovered</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <NumberFormat\r\n                  value={latest.recovered}\r\n                  displayType={\"text\"}\r\n                  thousandSeparator={true}\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n        </CardDeck>\r\n      </div>\r\n    );\r\n  \r\n\r\n  return header;\r\n}\r\n if(loading)return  <div className=\"spinners\">\r\n {\" \"}\r\n <Spinner animation=\"grow\" variant=\"primary\" />\r\n <Spinner animation=\"grow\" variant=\"secondary\" />\r\n <Spinner animation=\"grow\" variant=\"success\" />\r\n <Spinner animation=\"grow\" variant=\"danger\" />\r\n <Spinner animation=\"grow\" variant=\"warning\" />\r\n</div>\r\n return <div> {show()}</div>\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react'\r\nimport App from './App';\r\nimport Header from'./header'\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nfunction main(props) {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <App name=\"https://corona.lmao.ninja/v2/countries\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default main\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Main from './main';\n\n\n\nReactDOM.render(\n \n    <Main />,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}